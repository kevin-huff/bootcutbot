<!DOCTYPE html>
<html>
<head>
    <title>Timer</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=League+Gothic&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="../flipclock.css">
    <script src="https://kit.fontawesome.com/5a69a86b05.js" crossorigin="anonymous"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.3.min.js" integrity="sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>  
    <script src="../flipclock.js"></script>
    <script src="../timer.js"></script>
    <style>
        @keyframes timeAdded {
            0% { filter: brightness(1); }
            50% { filter: brightness(1.5); }
            100% { filter: brightness(1); }
        }
        .flash {
            animation: timeAdded 1s ease-in-out;
        }
        .time-added-notification {
            position: absolute;
            left: 275px;
            top: 100px;
            transform: translate(-50%, -50%);
            background: #1f1f1f;
            background: linear-gradient(to bottom, #3f3f3f 0%, #1f1f1f 100%);
            padding: 6px 12px;
            border-radius: 4px;
            font-family: 'League Gothic', sans-serif;
            font-size: 28px;
            color: #fff;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.4);
            border: 1px solid #000;
            box-shadow: 
                inset 0 1px 0 rgba(255,255,255,0.1),
                0 2px 4px rgba(0,0,0,0.4);
            opacity: 0;
            pointer-events: none;
            z-index: 200;
        }

        @keyframes floatUp {
            0% {
                opacity: 0;
                transform: translate(-50%, -50%);
            }
            20% {
                opacity: 1;
            }
            80% {
                opacity: 1;
                transform: translate(-50%, -150%);
            }
            100% {
                opacity: 0;
                transform: translate(-50%, -200%);
            }
        }

        .float-up {
            animation: floatUp 2s ease-out forwards;
        }

        .multiplier-indicator {
            position: absolute;
            top: 3px;
            left: 20px;
            background: #1f1f1f;
            background: linear-gradient(to bottom, #3f3f3f 0%, #1f1f1f 100%);
            padding: 6px 10px;
            border-radius: 4px;
            font-family: 'League Gothic', sans-serif;
            font-size: 24px;
            color: #ccc;
            display: none;
            z-index: 100;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.4);
            border: 2px solid gold;
            box-shadow: 
                inset 0 1px 0 rgba(255,255,255,0.1),
                0 2px 4px rgba(0,0,0,0.4);
        }

        .timer-info-grid {
            display: grid;
            grid-template-columns: repeat(2, auto);
            justify-content: start;
            gap: 10px;
            align-items: start;
            margin-top: 8px;
        }

        .end-time, .last-action {
            font-family: 'League Gothic', sans-serif;
            color: #ccc;
            background: #1f1f1f;
            background: linear-gradient(to bottom, #3f3f3f 0%, #1f1f1f 100%);
            padding: 4px 12px;
            border-radius: 4px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.4);
            border: 1px solid #000;
            box-shadow: inset 0 1px 0 rgba(255,255,255,0.1), 0 2px 4px rgba(0,0,0,0.4);
        }

        .end-time {
            font-size: 28px;
            justify-self: start;
        }

        .last-action {
            font-size: 24px;
            justify-self: end;
        }
    </style>

    <script type="text/javascript">
        $(document).ready(function() {
            // Initialize the clock with initial time from server
            var initialSeconds = parseInt("<%= initial_seconds || 0 %>");
            window.clock = $('.clock').FlipClock(initialSeconds, {
                clockFace: 'HourlyCounter',
                countdown: true,
                autoStart: false,
                callbacks: {
                    interval: function() {
                        var time = this.factory.getTime().time;
                        if (time <= 0) {
                            this.factory.stop();
                            window.clock.isPaused = true;
                        }
                    }
                }
            });

            // Store initial state
            window.clock.isPaused = true;

            // Set initial end time if we have initial seconds
            if (initialSeconds > 0) {
                const endTime = new Date(Date.now() + (initialSeconds * 1000));
                const estTime = new Date(endTime.toLocaleString('en-US', { timeZone: 'America/New_York' }));
                const formattedTime = estTime.toLocaleString('en-US', {
                    timeZone: 'America/New_York',
                    weekday: 'short',
                    month: 'short',
                    day: 'numeric',
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                });
                document.querySelector('.end-time').textContent = `Ends ${formattedTime} EST`;
            }

            // Function to format time duration
            function formatDuration(seconds) {
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                const secs = seconds % 60;
                
                let result = '';
                if (hours > 0) result += `${hours}h `;
                if (minutes > 0) result += `${minutes}m `;
                if (secs > 0 || (hours === 0 && minutes === 0)) result += `${secs}s`;
                
                return result.trim();
            }

            // Listen for timer events to update log
            window.socket.on('timer_log', (data) => {
                const lastAction = document.querySelector('.last-action');
                let details = '';
                
                if (data.action === 'add_time') {
                    details = `+${formatDuration(data.seconds)}`;
                    if (data.multiplier > 1) {
                        details += ` (${formatDuration(data.originalSeconds)} Ã— ${data.multiplier})`;
                    }
                    if (data.source && data.source !== 'manual') {
                        details += ` from ${data.source}`;
                    }
                } else if (data.action === 'subtract_time') {
                    details = `-${formatDuration(data.seconds)}`;
                    if (data.reason && data.reason !== 'manual') {
                        details += ` (${data.reason})`;
                    }
                }
                
                if (details) {
                    lastAction.textContent = details;
                    lastAction.style.display = 'block';
                }
            });

            // Join timer room to get current state
            window.socket.emit('join_subathon_timer');
        });
    </script>
</head>
 
<body>
    <div style="margin: 0; padding: 10px;">
        <div class="multiplier-indicator">2X</div>
        <div class="time-added-notification">+5m</div>
        <div style="position: relative;">
            <div class="clock" style="margin: 0.5em 0;"></div>
            <div class="timer-info-grid">
                <div class="end-time"></div>
                <div class="last-action" style="display: none;"></div>
            </div>
        </div>
        <div class="message"></div>
    </div>
</body>
</html>
