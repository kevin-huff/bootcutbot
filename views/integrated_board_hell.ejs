<!DOCTYPE html>
<html lang="en">
<% const initialHellfireSpotIds = Array.isArray(hellfireSpotIds) ? hellfireSpotIds : [];
   const initialHeavenFireSpotIds = Array.isArray(heavenFireSpotIds) ? heavenFireSpotIds : [];
   const hellfireSpotIdsStrings = initialHellfireSpotIds.map(function(id) { return String(id); });
   const heavenFireSpotIdsStrings = initialHeavenFireSpotIds.map(function(id) { return String(id); }); %>
<head>
    <!-- Existing Head Content -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootcut Game Interface</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel+Decorative:wght@400;700&family=Inter:wght@400;600;700&family=UnifrakturCook:wght@700&display=swap" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <!-- JavaScript code remains unchanged -->
    <script type="text/javascript">
    const normalizeBreakawayId = (rawId) => {
        if (rawId === undefined || rawId === null) { return ''; }
        const maybeNumber = Number(rawId);
        return Number.isNaN(maybeNumber) ? String(rawId) : String(maybeNumber);
    };

    const toBreakawayRecord = (raw = {}) => {
        const id = normalizeBreakawayId(raw.id);
        const dotsSource = raw.ba_dots ?? raw.ba_dot ?? 0;
        const dots = Number(dotsSource);
        return {
            id,
            name: raw.name ?? '',
            ba_dots: Number.isNaN(dots) ? 0 : dots
        };
    };

    const initialBreakaways = (<%- JSON.stringify(breakaways || []) %>).map(toBreakawayRecord);
    window.breakawayDataMap = new Map(initialBreakaways.map(item => [item.id, item]));
    window.__BREAKAWAYS__ = initialBreakaways;

    const CURRENT_PLAYER_MAX_FONT = 46; // px
    const CURRENT_PLAYER_MIN_FONT = 20; // px
    const SPLOT_ENTRY_MAX_FONT = 22; // px
    const SPLOT_ENTRY_MIN_FONT = 6; // px
    let currentPlayerFrame = null;
    let splotFitFrame = null;
    const HELLFIRE_SPOT_IDS = new Set(<%- JSON.stringify(hellfireSpotIdsStrings) %>);
    const HEAVENFIRE_SPOT_IDS = new Set(<%- JSON.stringify(heavenFireSpotIdsStrings) %>);
    window.hellfireSpotIds = HELLFIRE_SPOT_IDS;
    window.heavenfireSpotIds = HEAVENFIRE_SPOT_IDS;
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    const hellfireEmberGenerators = [
        { center: 0.32, spread: 0.08 },
        { center: 0.5, spread: 0.12 },
        { center: 0.68, spread: 0.08 }
    ];
    const heavenfireEmberGenerators = [
        { center: 0.35, spread: 0.12 },
        { center: 0.5, spread: 0.18 },
        { center: 0.65, spread: 0.12 }
    ];

    const FIRE_THEME_CONFIG = {
        hellfire: {
            generators: hellfireEmberGenerators,
            maxSparks: 42,
            spawnProbability: 0.28,
            velocityX: { min: -0.05, max: 0.05, decay: 0.98 },
            velocityY: { min: 0.8, max: 1.2, decay: 0.98 },
            size: { min: 0.8, max: 1.8 },
            life: { min: 0.5, max: 1.0 },
            gradientStops: [
                { stop: 0, color: 'rgba(26, 4, 0, 0.45)' },
                { stop: 0.4, color: 'rgba(80, 16, 0, 0.12)' },
                { stop: 1, color: 'rgba(80, 16, 0, 0)' }
            ],
            fillStyle: (lifeRatio) => `rgba(255, ${Math.floor(200 + 50 * (1 - lifeRatio))}, ${Math.floor(150 + 80 * (1 - lifeRatio))}, ${0.8 - lifeRatio * 0.7})`,
            shadowColor: 'rgba(255, 180, 100, 0.5)',
            shadowBlur: 6
        },
        heavenfire: {
            generators: heavenfireEmberGenerators,
            maxSparks: 36,
            spawnProbability: 0.22,
            velocityX: { min: -0.035, max: 0.035, decay: 0.99 },
            velocityY: { min: 0.45, max: 0.85, decay: 0.99 },
            size: { min: 0.9, max: 2.2 },
            life: { min: 0.7, max: 1.3 },
            gradientStops: [
                { stop: 0, color: 'rgba(215, 240, 255, 0.45)' },
                { stop: 0.45, color: 'rgba(180, 220, 255, 0.12)' },
                { stop: 1, color: 'rgba(180, 200, 230, 0)' }
            ],
            fillStyle: (lifeRatio) => `rgba(${Math.floor(220 + 25 * (1 - lifeRatio))}, ${Math.floor(240 + 15 * (1 - lifeRatio))}, 255, ${0.75 - lifeRatio * 0.55})`,
            shadowColor: 'rgba(200, 230, 255, 0.6)',
            shadowBlur: 10
        }
    };

    const fireEmberControllers = new Map();

    function fireRandomBetween(min, max) {
        return min + Math.random() * (max - min);
    }

    function createFireSpark(config, generator) {
        return {
            x: fireRandomBetween(generator.center - generator.spread, generator.center + generator.spread),
            y: 1,
            vx: fireRandomBetween(config.velocityX.min, config.velocityX.max),
            vy: fireRandomBetween(config.velocityY.min, config.velocityY.max),
            size: fireRandomBetween(config.size.min, config.size.max),
            life: 0,
            maxLife: fireRandomBetween(config.life.min, config.life.max)
        };
    }

    function stopFireEmbers(normalizedId) {
        const key = normalizedId ? normalizeBreakawayId(normalizedId) : '';
        if (!key) { return; }
        const controller = fireEmberControllers.get(key);
        if (!controller) { return; }
        cancelAnimationFrame(controller.frameId);
        if (controller.pendingResize) {
            cancelAnimationFrame(controller.pendingResize);
        }
        window.removeEventListener('resize', controller.resize);
        controller.sparks.length = 0;
        fireEmberControllers.delete(key);
    }

    function stopAllFireEmbers() {
        Array.from(fireEmberControllers.keys()).forEach(stopFireEmbers);
    }

    function startFireEmbers(element, normalizedId, theme = 'hellfire') {
        if (prefersReducedMotion) { return; }
        if (!element) { return; }
        const key = normalizedId ? normalizeBreakawayId(normalizedId) : normalizeBreakawayId(element.dataset.spotId);
        if (!key) { return; }
        const fireTheme = FIRE_THEME_CONFIG[theme] ? theme : 'hellfire';
        const config = FIRE_THEME_CONFIG[fireTheme];
        stopFireEmbers(key);

        const canvas = element.querySelector('.hellfire-embers-canvas');
        if (!canvas) { return; }
        const ctx = canvas.getContext('2d');
        if (!ctx) { return; }

        const controller = {
            id: key,
            theme: fireTheme,
            config,
            canvas,
            ctx,
            sparks: [],
            frameId: null,
            lastTime: performance.now(),
            resize: null,
            pendingResize: null
        };

        controller.resize = () => {
            const { clientWidth, clientHeight } = canvas;
            if (!clientWidth || !clientHeight) {
                if (!controller.pendingResize) {
                    controller.pendingResize = requestAnimationFrame(() => {
                        controller.pendingResize = null;
                        controller.resize();
                    });
                }
                return;
            }
            const dpr = window.devicePixelRatio || 1;
            canvas.width = clientWidth * dpr;
            canvas.height = clientHeight * dpr;
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.scale(dpr, dpr);
        };

        controller.resize();
        window.addEventListener('resize', controller.resize);

        const render = (time) => {
            const dt = Math.min(0.05, (time - controller.lastTime) / 1000 || 0.016);
            controller.lastTime = time;
            const width = canvas.clientWidth;
            const height = canvas.clientHeight;

            if (!width || !height) {
                controller.frameId = requestAnimationFrame(render);
                return;
            }

            ctx.globalCompositeOperation = 'source-over';
            ctx.clearRect(0, 0, width, height);

            const baseGradient = ctx.createLinearGradient(0, height, 0, height * 0.35);
            controller.config.gradientStops.forEach(({ stop, color }) => baseGradient.addColorStop(stop, color));
            ctx.fillStyle = baseGradient;
            ctx.fillRect(0, 0, width, height);

            ctx.globalCompositeOperation = 'lighter';

            const sparks = controller.sparks;

            controller.config.generators.forEach((generator) => {
                if (sparks.length < controller.config.maxSparks && Math.random() < controller.config.spawnProbability) {
                    sparks.push(createFireSpark(controller.config, generator));
                }
            });

            for (let i = sparks.length - 1; i >= 0; i -= 1) {
                const spark = sparks[i];
                spark.life += dt;
                spark.y -= spark.vy * dt;
                spark.x += spark.vx * dt;
                spark.vy *= controller.config.velocityY.decay;
                spark.vx *= controller.config.velocityX.decay;

                const lifeRatio = spark.life / spark.maxLife;
                if (lifeRatio >= 1 || spark.y < -0.1) {
                    sparks.splice(i, 1);
                    continue;
                }

                const radius = spark.size * (1 - lifeRatio * 0.8);
                ctx.beginPath();
                ctx.fillStyle = controller.config.fillStyle(lifeRatio);
                ctx.shadowColor = controller.config.shadowColor;
                ctx.shadowBlur = controller.config.shadowBlur;
                ctx.arc(spark.x * width, spark.y * height, radius, 0, Math.PI * 2);
                ctx.fill();
            }

            ctx.shadowBlur = 0;
            controller.frameId = requestAnimationFrame(render);
        };

        controller.frameId = requestAnimationFrame(render);
        fireEmberControllers.set(key, controller);
    }

    function isHellfireSpot(id) {
        if (id === undefined || id === null) { return false; }
        return HELLFIRE_SPOT_IDS.has(normalizeBreakawayId(id));
    }

    function isHeavenfireSpot(id) {
        if (id === undefined || id === null) { return false; }
        return HEAVENFIRE_SPOT_IDS.has(normalizeBreakawayId(id));
    }

    function applyFireState(element, id) {
        if (!element) { return; }
        const normalizedId = normalizeBreakawayId(id || element.dataset.spotId || (element.id || '').replace('splot_', ''));
        if (normalizedId) {
            element.dataset.spotId = normalizedId;
        }
        const isHeaven = isHeavenfireSpot(normalizedId);
        const isHell = !isHeaven && isHellfireSpot(normalizedId);

        element.classList.toggle('is-heavenfire', isHeaven);
        element.classList.toggle('is-hellfire', isHell);

        if (isHeaven) {
            element.dataset.heavenfire = 'true';
            element.dataset.hellfire = '';
            HEAVENFIRE_SPOT_IDS.add(normalizedId);
        } else {
            delete element.dataset.heavenfire;
        }

        if (isHell) {
            element.dataset.hellfire = 'true';
            HELLFIRE_SPOT_IDS.add(normalizedId);
        } else {
            delete element.dataset.hellfire;
        }

        element.dataset.fireTheme = isHeaven ? 'heavenfire' : isHell ? 'hellfire' : '';

        const entryNode = element.querySelector('.splotEntry');
        const entryText = entryNode ? entryNode.textContent.trim() : '';
        if (!element.dataset.hellfireAriaSaved && element.hasAttribute('aria-label') && !element.dataset.fireTheme) {
            element.dataset.hellfireAriaSaved = element.getAttribute('aria-label') || '';
        }

        if (isHeaven) {
            element.setAttribute('aria-label', entryText ? `Heavenfire spot ${normalizedId}: ${entryText}` : `Heavenfire spot ${normalizedId}`);
            element.dataset.hellfireLabelApplied = 'true';
        } else if (isHell) {
            element.setAttribute('aria-label', entryText ? `Hellfire spot ${normalizedId}: ${entryText}` : `Hellfire spot ${normalizedId}`);
            element.dataset.hellfireLabelApplied = 'true';
        } else if (element.dataset.hellfireLabelApplied) {
            if (element.dataset.hellfireAriaSaved) {
                element.setAttribute('aria-label', element.dataset.hellfireAriaSaved);
            } else {
                element.removeAttribute('aria-label');
            }
            delete element.dataset.hellfireAriaSaved;
            delete element.dataset.hellfireLabelApplied;
        }

        const tag = element.querySelector('.hellfire-tag');
        if (tag) {
            tag.textContent = isHeaven ? 'Heavenfire' : isHell ? 'Hellfire' : '';
            if (isHeaven || isHell) {
                tag.dataset.fireTheme = isHeaven ? 'heavenfire' : 'hellfire';
            } else {
                delete tag.dataset.fireTheme;
            }
        }

        if (isHeaven || isHell) {
            startFireEmbers(element, normalizedId, isHeaven ? 'heavenfire' : 'hellfire');
        }
    }

    function setCurrentPlayerFont(px) {
        const el = document.getElementById('current_player');
        if (!el) { return; }
        el.style.setProperty('--current-player-font-size', `${px}px`);
    }

    function getTopBarAvailableWidth() {
        const topBar = document.querySelector('.top-bar');
        if (!topBar) { return 0; }
        const timerCluster = topBar.querySelector('.timer-cluster');
        const ribbon = topBar.querySelector('.breakaway-ribbon');
        if (!timerCluster || !ribbon) { return 0; }
        const style = window.getComputedStyle(topBar);
        const padding = (parseFloat(style.paddingLeft) || 0) + (parseFloat(style.paddingRight) || 0);
        const gap = parseFloat(style.columnGap || style.gridColumnGap || style.gap || 0) || 0;
        const available = topBar.clientWidth - padding - (gap * 2) - timerCluster.offsetWidth - ribbon.offsetWidth;
        return Math.max(0, available);
    }

    function fitCurrentPlayer() {
        const el = document.getElementById('current_player');
        if (!el) { return; }
        const availableWidth = getTopBarAvailableWidth();
        if (!availableWidth) {
            setCurrentPlayerFont(CURRENT_PLAYER_MIN_FONT);
            return;
        }
        setCurrentPlayerFont(CURRENT_PLAYER_MAX_FONT);
        requestAnimationFrame(() => {
            const textWidth = el.scrollWidth;
            if (textWidth <= availableWidth) { return; }
            const ratio = availableWidth / textWidth;
            const target = Math.max(CURRENT_PLAYER_MIN_FONT, Math.floor(CURRENT_PLAYER_MAX_FONT * ratio * 100) / 100);
            setCurrentPlayerFont(target);
        });
    }

    function queueFitCurrentPlayer() {
        if (currentPlayerFrame) {
            cancelAnimationFrame(currentPlayerFrame);
        }
        currentPlayerFrame = requestAnimationFrame(() => {
            currentPlayerFrame = null;
            fitCurrentPlayer();
        });
    }

    function setSplotEntryFont(el, px) {
        el.style.setProperty('--splot-entry-font-size', `${px}px`);
    }

    function fitSplotEntryElement(el) {
        if (!el) { return; }
        let fontSize = SPLOT_ENTRY_MAX_FONT;
        setSplotEntryFont(el, fontSize);
        let maxHeight = el.dataset.maxHeight ? Number(el.dataset.maxHeight) : el.offsetHeight;
        let iterations = 0;
        while (fontSize > SPLOT_ENTRY_MIN_FONT && iterations < 40) {
            const scrollHeight = el.scrollHeight;
            const scrollWidth = el.scrollWidth;
            const boxWidth = el.offsetWidth;
            if (scrollHeight <= maxHeight + 1 && scrollWidth <= boxWidth + 1) {
                break;
            }
            fontSize = Math.max(SPLOT_ENTRY_MIN_FONT, fontSize - 1);
            setSplotEntryFont(el, fontSize);
            iterations += 1;
        }
    }

    function fitAllSplotEntries() {
        if (splotFitFrame) {
            cancelAnimationFrame(splotFitFrame);
        }
        splotFitFrame = requestAnimationFrame(() => {
            splotFitFrame = null;
            document.querySelectorAll('.splotEntry').forEach((el) => {
                const computed = window.getComputedStyle(el);
                const lineHeight = parseFloat(computed.lineHeight) || 18;
                el.dataset.maxHeight = lineHeight * 2;
                fitSplotEntryElement(el);
            });
        });
    }

    function fitSingleSplotEntry(id) {
        if (!id) { return; }
        const el = document.getElementById(`splotEntry_${id}`);
        if (!el) { return; }
        if (splotFitFrame) {
            cancelAnimationFrame(splotFitFrame);
        }
        splotFitFrame = requestAnimationFrame(() => {
            splotFitFrame = null;
            const computed = window.getComputedStyle(el);
            const lineHeight = parseFloat(computed.lineHeight) || 18;
            el.dataset.maxHeight = lineHeight * 2;
            fitSplotEntryElement(el);
        });
    }

    window.fitCurrentPlayer = queueFitCurrentPlayer;
    window.fitSplotEntries = fitAllSplotEntries;
    $(document).ready(function() {
        updateTurn('<%= current_turn %>');
        queueFitCurrentPlayer();
        fitAllSplotEntries();

        var CountDown = (function ($) {
        // Length ms 
        var TimeOut = 10000;
        // Interval ms
        var TimeGap = 1000;
        
        var CurrentTime = ( new Date() ).getTime();
        var EndTime = ( new Date() ).getTime() + TimeOut;
        
        var GuiTimer = $('#timer');
        var GuiPause = $('#pause');
        
        var Running = false;
        
        var UpdateTimer = function() {
        // Run till timeout
        if( CurrentTime + TimeGap < EndTime && Running ) {
            setTimeout( UpdateTimer, TimeGap );
        }
        // Countdown if running
        if( Running ) {
            CurrentTime += TimeGap;
            if( CurrentTime >= EndTime ) {
                Running = false;
                $('#timer_num').text('00:00');
                $('#timer_display').css('color','#DD2222');
                $('#current_player').css('color','#DD2222');
                $('#timer_display').addClass('blink_me');
                $('#current_player').addClass('blink_me');
            } else {
                // Update Gui
                var Time = new Date();
                Time.setTime( EndTime - CurrentTime );
                var Minutes = Time.getMinutes();
                var Seconds = Time.getSeconds();
                $('#timer_num').text( 
                String(Minutes).padStart(2, '0') + ':' + 
                String(Seconds).padStart(2, '0') );
            }
        }
                
        };
        
        var Pause = function() {
            Running = false;
        };
        
        var Resume = function() {
            Running = true;
            UpdateTimer();
        };
        
        var Start = function( Timeout ) {
        $('#timer_display').css('color','#F3C623');
        $('#current_player').css('color','#F3C623');
        $('#timer_display').removeClass('blink_me');
        $('#current_player').removeClass('blink_me');
        TimeOut = Timeout;
        CurrentTime = ( new Date() ).getTime();
        EndTime = ( new Date() ).getTime() + TimeOut;
        UpdateTimer();
        };

        return {
            Pause: Pause,
            Resume: Resume,
            Start: Start
        };
  })(jQuery);

    let thisCountDown = CountDown
    const timerDisplayEl = document.getElementById('timer_display');
    const timerFlipperEl = timerDisplayEl ? timerDisplayEl.querySelector('.timer-flipper') : null;
    const turnTimerFaceEl = timerDisplayEl ? timerDisplayEl.querySelector('.timer-face--turn') : null;
    const hellTimerFaceEl = timerDisplayEl ? timerDisplayEl.querySelector('.timer-face--hell') : null;
    const hellTimerValueEl = document.getElementById('hell_timer_num');
    const hellAudioEl = document.getElementById('hellfire');

    if (timerDisplayEl && timerFlipperEl && turnTimerFaceEl && hellTimerFaceEl && hellTimerValueEl) {
        if (prefersReducedMotion) {
            timerDisplayEl.classList.add('prefers-reduced-motion');
        }

        const formatSegment = (value) => String(value).padStart(2, '0');
        const computeNextTopOfHour = () => {
            const now = new Date();
            const next = new Date(now);
            next.setMilliseconds(0);
            next.setSeconds(0);
            next.setMinutes(0);
            next.setHours(next.getHours() + 1);
            return next.getTime();
        };

        let hellTargetTimestamp = computeNextTopOfHour();

        const triggerHellfireAlarm = () => {
            if (!hellAudioEl) { return; }
            hellAudioEl.volume = 1;
            hellAudioEl.muted = false;
            let playsRemaining = 3;

            function playNext() {
                if (playsRemaining <= 0) {
                    hellAudioEl.removeEventListener('ended', handleEnded);
                    return;
                }
                playsRemaining -= 1;
                hellAudioEl.currentTime = 0;
                const playAttempt = hellAudioEl.play();
                if (playAttempt && typeof playAttempt.catch === 'function') {
                    playAttempt.catch((error) => {
                        console.warn('Hell timer audio playback blocked:', error);
                    });
                }
            }

            function handleEnded() {
                if (playsRemaining <= 0) {
                    hellAudioEl.removeEventListener('ended', handleEnded);
                    return;
                }
                setTimeout(playNext, 120);
            }

            hellAudioEl.removeEventListener('ended', handleEnded);
            hellAudioEl.addEventListener('ended', handleEnded);
            playNext();
        };

        const updateHellTimer = () => {
            const now = Date.now();
            if (now >= hellTargetTimestamp) {
                triggerHellfireAlarm();
                hellTargetTimestamp = computeNextTopOfHour();
            }
            const millisRemaining = Math.max(0, hellTargetTimestamp - now);
            const totalSeconds = Math.floor(millisRemaining / 1000);
            const minutes = Math.floor(totalSeconds / 60);
            const seconds = totalSeconds % 60;
            hellTimerValueEl.textContent = `${formatSegment(minutes)}:${formatSegment(seconds)}`;
        };

        updateHellTimer();
        setInterval(updateHellTimer, 1000);

        let isShowingHellFace = false;
        const syncFaceState = () => {
            timerDisplayEl.dataset.activeFace = isShowingHellFace ? 'hell' : 'turn';
            turnTimerFaceEl.setAttribute('aria-hidden', isShowingHellFace ? 'true' : 'false');
            hellTimerFaceEl.setAttribute('aria-hidden', isShowingHellFace ? 'false' : 'true');
            if (prefersReducedMotion) {
                turnTimerFaceEl.classList.toggle('is-active', !isShowingHellFace);
                hellTimerFaceEl.classList.toggle('is-active', isShowingHellFace);
            }
        };

        syncFaceState();

        const cycleFaces = () => {
            isShowingHellFace = !isShowingHellFace;
            timerDisplayEl.classList.toggle('is-showing-hell', isShowingHellFace);
            syncFaceState();
        };

        const cycleIntervalMs = 6000;
        setInterval(cycleFaces, cycleIntervalMs);
    }

    let socket = io();
    socket.on("connect", () => {
        console.log('socket connected: ',socket.connected); // true
    });
    socket.on('board_update', function(splot_data){
        console.log('board_update')
        updateBoard(splot_data);
    });
    socket.on('alt_splot_swap', function(splot_data){
        console.log('alt_splot_swap', splot_data);
        handleAltSplotSwap(splot_data);
    });
    socket.on('clear_board', function(msg){
        console.log('clear_board')
        clearBoard();
    });
    socket.on('new_turn', function(msg){
        console.log('new_turn')
        updateTurn(msg);
    });
    socket.on('timer_server', function(msg){
        console.log('timer_admin:', msg)
        $('#timer_num').text(msg.timer_display);
        if(msg.action == 'start'){
          thisCountDown.Start(msg.timer_value);
        }
        if(msg.action == 'pause'){
          thisCountDown.Pause();
        }
        if(msg.action == 'resume'){
          thisCountDown.Resume();
        }
    }); 
    socket.on('ba_update', function(ba_data){
        console.log('ba_update')
        updateBreakaways(ba_data);
    });
    socket.on('dice_rolled', function(data){
    var this_uuid = generateUUID();          
    // Create HTML structure
    var roll_animation = $('<div>')
        .attr('class', 'dice-roll-popup').attr('id', 'roll-' + this_uuid)
        .append($('<div>').attr('class', 'inner-lcars')
            .append($('<div>').attr('class', 'die-name')
                .append($('<p>').html(data.dice_name)))
            .append($('<div>').attr('class', 'roll-value')
                .append($('<p>').attr('class', 'roll').html(data.roll_value)))
            .append($('<div>').attr('class', 'die-type')
                .append($('<p>').html(data.dice_type))));
    // add structure to body
    $('body').append(roll_animation);
    // randomly select a jquery ui effect
    var effects = ['slide', 'clip', 'fade', 'blind', 'explode', 'puff', 'shake', 'fold'];
    var effect = effects[Math.floor(Math.random()*effects.length)];
    // apply effect when animation is shown
    $('#roll-' + this_uuid).show(500);
    // remove animation after 2 seconds
    setTimeout(function(){
        $('#roll-' + this_uuid).hide( 500, function(){
            $('#roll-' + this_uuid).remove();
        });
    }, 5000);
    //If its' a d8 then flash the border of the spot number and entry
    if(data.dice_type == 'D8'){
        flashBorder(data.roll_value);
        if(data.roll_value == 6){
            var audio = document.getElementById('hellfire');
            audio.play();
        }
    }    
});
    function updateTurn(text) {
      $('#timer_display').removeClass('blink_me');
      $('#current_player').removeClass('blink_me');
      document.getElementById("current_player").textContent = text;
      queueFitCurrentPlayer();
    }
    function getSplotData(splot_id){
      let current_splot_dots = parseInt(document.getElementById("splot_dot_" + splot_id).innerHTML);
      let current_splot_entry = document.getElementById("splotEntry_" + splot_id).innerHTML.trim();
      let splot_data = {
          id: splot_id,
          entry: current_splot_entry,
          splot_dot: current_splot_dots
      }
      console.log('getSplotData',splot_data)
      return splot_data;
    }
    function renderSpotInnerHTML(splot_data = {}, theme = 'none') {
        const normalizedId = normalizeBreakawayId(splot_data.id || '');
        const entry = splot_data.entry === undefined || splot_data.entry === null ? '' : splot_data.entry;
        const uses = (splot_data.splot_dot === undefined || splot_data.splot_dot === null) ? 0 : splot_data.splot_dot;
        const fireTheme = theme === 'heavenfire' ? 'heavenfire' : (theme === 'hellfire' ? 'hellfire' : '');
        const fireAttr = fireTheme ? ` data-fire-theme="${fireTheme}"` : '';
        const tagLabel = fireTheme === 'heavenfire' ? 'Heavenfire' : fireTheme === 'hellfire' ? 'Hellfire' : '';
        return `
            <div class="hellfire-aura" aria-hidden="true"${fireAttr}></div>
            <div class="hellfire-embers" aria-hidden="true"${fireAttr}>
                <canvas class="hellfire-embers-canvas" aria-hidden="true"${fireAttr}></canvas>
            </div>
            <div class="hellfire-tag" aria-hidden="true"${fireAttr}>${tagLabel}</div>
            <h2>
                <span class="spot-number" id="splot_number_${normalizedId}">
                    ${normalizedId}
                </span>
                <span class="splotEntry" id="splotEntry_${normalizedId}">${entry}</span>
            </h2>
            <p class="use-count" id="splot_count_${normalizedId}">Uses: ${uses}</p>
        `;
    }
    function updateBoard(splot_data){    
        const normalizedId = normalizeBreakawayId(splot_data.id || '');
        stopFireEmbers(normalizedId);
        if (typeof splot_data.isAlt === 'boolean') {
            if (normalizedId === '6') {
                if (splot_data.isAlt) {
                    HEAVENFIRE_SPOT_IDS.add(normalizedId);
                    HELLFIRE_SPOT_IDS.delete(normalizedId);
                } else {
                    HEAVENFIRE_SPOT_IDS.delete(normalizedId);
                    HELLFIRE_SPOT_IDS.add(normalizedId);
                }
            } else {
                if (splot_data.isAlt) {
                    HEAVENFIRE_SPOT_IDS.delete(normalizedId);
                    HELLFIRE_SPOT_IDS.add(normalizedId);
                } else {
                    HELLFIRE_SPOT_IDS.delete(normalizedId);
                }
            }
        }

        const isHeavenfireActive = isHeavenfireSpot(normalizedId);
        const isHellfireActive = !isHeavenfireActive && isHellfireSpot(normalizedId);
        const activeTheme = isHeavenfireActive ? 'heavenfire' : (isHellfireActive ? 'hellfire' : 'none');
        const isAltActive = typeof splot_data.isAlt === 'boolean' ? splot_data.isAlt : isHeavenfireActive;
        const preferredEntry = isAltActive && splot_data.alt_entry !== undefined && splot_data.alt_entry !== null && splot_data.alt_entry !== ''
            ? splot_data.alt_entry
            : splot_data.entry;
        const preferredDotsSource = isAltActive && splot_data.alt_splot_dot !== undefined && splot_data.alt_splot_dot !== null
            ? splot_data.alt_splot_dot
            : splot_data.splot_dot;
        const preferredDots = Number(preferredDotsSource);
        const prepared = {
            id: splot_data.id,
            entry: preferredEntry,
            splot_dot: Number.isNaN(preferredDots) ? 0 : preferredDots
        };
        var innerHTML = renderSpotInnerHTML(prepared, activeTheme);
        var this_splot = document.getElementById('splot_' + splot_data.id);

        if (this_splot) {
            this_splot.classList.add('tilt-card');
            $('#splot_' + splot_data.id).fadeOut("slow", function() {
                this_splot.innerHTML = innerHTML;
                applyFireState(this_splot, splot_data.id);
                this_splot.style.setProperty('--tiltX', '0deg');
                this_splot.style.setProperty('--tiltY', '0deg');
                $('#splot_' + splot_data.id).fadeIn();
                attachTiltHandlers(this_splot);
                if (window.refreshElectricBorderSpots) { window.refreshElectricBorderSpots(); }
            }); 

        } else {
            var div = document.createElement("div");
            div.className = "spot tilt-card item";
            div.id = 'splot_' + splot_data.id;
            div.innerHTML = innerHTML;
            document.getElementById("board").appendChild(div);
            applyFireState(div, splot_data.id);
            $('#splot_' + splot_data.id).fadeIn("slow", function(){
                attachTiltHandlers(div);
                if (window.refreshElectricBorderSpots) { window.refreshElectricBorderSpots(); }
            });
        }
        queueFitCurrentPlayer();
        fitSingleSplotEntry(splot_data.id);
    }

    function syncFireSetsFromPayload(hellfireIds = [], heavenfireIds = []) {
        const normalizedHell = Array.from(new Set(hellfireIds
            .map((value) => normalizeBreakawayId(value))
            .filter((value) => value !== '')));
        const normalizedHeaven = Array.from(new Set(heavenfireIds
            .map((value) => normalizeBreakawayId(value))
            .filter((value) => value !== '')));

        const existingIds = new Set([...HELLFIRE_SPOT_IDS, ...HEAVENFIRE_SPOT_IDS]);
        const nextIds = new Set([...normalizedHell, ...normalizedHeaven]);

        existingIds.forEach((id) => {
            if (!nextIds.has(id)) {
                stopFireEmbers(id);
            }
        });

        HELLFIRE_SPOT_IDS.clear();
        normalizedHell.forEach((id) => HELLFIRE_SPOT_IDS.add(id));

        HEAVENFIRE_SPOT_IDS.clear();
        normalizedHeaven.forEach((id) => HEAVENFIRE_SPOT_IDS.add(id));
    }

    function handleAltSplotSwap(data) {
        if (!data) { return; }
        const normalizedId = normalizeBreakawayId(data.id);
        if (!normalizedId) { return; }

        stopFireEmbers(normalizedId);

        if (Array.isArray(data.hellfireSpotIds) || Array.isArray(data.heavenFireSpotIds)) {
            syncFireSetsFromPayload(data.hellfireSpotIds || [], data.heavenFireSpotIds || []);
        } else if (typeof data.isAlt === 'boolean') {
            if (normalizedId === '6') {
                if (data.isAlt) {
                    HEAVENFIRE_SPOT_IDS.add(normalizedId);
                    HELLFIRE_SPOT_IDS.delete(normalizedId);
                } else {
                    HEAVENFIRE_SPOT_IDS.delete(normalizedId);
                    HELLFIRE_SPOT_IDS.add(normalizedId);
                }
            } else {
                if (data.isAlt) {
                    HEAVENFIRE_SPOT_IDS.delete(normalizedId);
                    HELLFIRE_SPOT_IDS.add(normalizedId);
                } else {
                    HELLFIRE_SPOT_IDS.delete(normalizedId);
                }
            }
        }

        const isHeaven = isHeavenfireSpot(normalizedId);
        const isHell = !isHeaven && isHellfireSpot(normalizedId);
        const theme = isHeaven ? 'heavenfire' : (isHell ? 'hellfire' : 'none');
        const isAltActive = typeof data.isAlt === 'boolean' ? data.isAlt : isHeaven;
        const entry = isAltActive ? (data.alt_entry ?? data.entry ?? '') : (data.entry ?? '');
        const dotsSource = isAltActive ? (data.alt_splot_dot ?? data.splot_dot) : data.splot_dot;
        const splotDot = Number(dotsSource);
        const prepared = {
            id: normalizedId,
            entry,
            splot_dot: Number.isNaN(splotDot) ? 0 : splotDot
        };

        const target = document.getElementById(`splot_${normalizedId}`);
        if (!target) { return; }

        target.innerHTML = renderSpotInnerHTML(prepared, theme);
        applyFireState(target, normalizedId);
        attachTiltHandlers(target);
        if (window.refreshElectricBorderSpots) { window.refreshElectricBorderSpots(); }
        fitSingleSplotEntry(normalizedId);
    }
    function clearBoard(){
      stopAllFireEmbers();
      $('#board').fadeOut();
      document.getElementById("board").innerHTML = "";
      $('#board').fadeIn();
    }
    // Add the generateUUID function
    function generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
        });
    }
    function updateBreakaways(ba_data){
        if (!window.breakawayDataMap) {
            window.breakawayDataMap = new Map();
        }
        const record = toBreakawayRecord(ba_data);
        if (!record.id) { return; }
        const numericKey = Number(record.id);
        if (!Number.isNaN(numericKey)) {
            window.breakawayDataMap.delete(numericKey);
        }
        window.breakawayDataMap.set(record.id, record);
        if (typeof window.renderBreakawayRibbon === 'function') {
            window.renderBreakawayRibbon(Array.from(window.breakawayDataMap.values()));
        }
        queueFitCurrentPlayer();
    }
    // Function to apply the hover effect to a spot div by id
    function flashBorder(roll_value){
        const highlightId = normalizeBreakawayId(roll_value);
        // remove any other spot highlighted
        for (let i = 1; i < 9; i++) {
            const spot = document.getElementById('splot_' + i);
            if (!spot) { continue; }
            const hellfire = isHellfireSpot(i);
            const heavenfire = isHeavenfireSpot(i);
            spot.classList.remove('is-hellfire-highlight');
            spot.classList.remove('is-heavenfire-highlight');
            if (spot.classList.contains('electric-border-spot')) {
                spot.classList.remove('is-highlighted');
                spot.style.removeProperty('border');
                spot.style.removeProperty('--glowX');
                spot.style.removeProperty('--glowY');
            } else if (!hellfire && !heavenfire) {
                spot.style.border = '1px solid rgba(243, 198, 35, 0.24)';
                spot.style.removeProperty('--glowX');
                spot.style.removeProperty('--glowY');
            } else {
                spot.style.removeProperty('border');
                spot.style.removeProperty('--glowX');
                spot.style.removeProperty('--glowY');
            }
        }
        const spotId = highlightId || roll_value;
        const targetSpot = document.getElementById('splot_' + spotId);
        if (!targetSpot) { return; }
        const targetIsHellfire = isHellfireSpot(spotId);
        const targetIsHeavenfire = isHeavenfireSpot(spotId);
        let mouseoverEvent = new Event('mouseover');
        targetSpot.dispatchEvent(mouseoverEvent);
        if (targetSpot.classList.contains('electric-border-spot')) {
            targetSpot.classList.add('is-highlighted');
            targetSpot.style.removeProperty('border');
        } else if (targetIsHeavenfire) {
            targetSpot.classList.add('is-heavenfire-highlight');
        } else if (targetIsHellfire) {
            targetSpot.classList.add('is-hellfire-highlight');
        } else {
            targetSpot.style.border = '2px solid #FF6A00';
            targetSpot.style.setProperty('--glowX', '50%');
            targetSpot.style.setProperty('--glowY', '35%');
        }
    }

    function attachTiltHandlers(target){
        if (prefersReducedMotion) { return; }
        let cards = [];
        if (!target) {
            cards = document.querySelectorAll('.tilt-card');
        } else if (target instanceof Element && target.classList.contains('tilt-card')) {
            cards = [target];
        } else if (target instanceof Element) {
            cards = target.querySelectorAll('.tilt-card');
        }
        cards.forEach(card => {
            if (card.dataset.tiltBound) { return; }
            card.dataset.tiltBound = 'true';
            card.style.setProperty('--tiltX', '0deg');
            card.style.setProperty('--tiltY', '0deg');
            card.style.setProperty('--glowX', '50%');
            card.style.setProperty('--glowY', '50%');
            card.style.setProperty('--tiltElev', '0px');
            card.addEventListener('mousemove', handleTiltMove);
            card.addEventListener('mouseleave', resetTiltMove);
            card.addEventListener('touchstart', () => card.classList.add('is-touching'), { passive: true });
            card.addEventListener('touchmove', handleTiltMove, { passive: true });
            card.addEventListener('touchend', resetTiltMove, { passive: true });
        });
    }

    function handleTiltMove(event){
        const card = event.currentTarget;
        const rect = card.getBoundingClientRect();
        const point = event.touches ? event.touches[0] : event;
        const x = point.clientX - rect.left;
        const y = point.clientY - rect.top;
        const percentX = (x / rect.width) - 0.5;
        const percentY = (y / rect.height) - 0.5;
        const maxTilt = 10;
        const tiltY = (percentX * maxTilt * -1).toFixed(2);
        const tiltX = (percentY * maxTilt).toFixed(2);
        card.style.setProperty('--tiltX', tiltX + 'deg');
        card.style.setProperty('--tiltY', tiltY + 'deg');
        card.style.setProperty('--glowX', (percentX * 60 + 50).toFixed(2) + '%');
        card.style.setProperty('--glowY', (percentY * 60 + 50).toFixed(2) + '%');
    }

    function resetTiltMove(event){
        const card = event.currentTarget;
        card.style.setProperty('--tiltX', '0deg');
        card.style.setProperty('--tiltY', '0deg');
        card.style.setProperty('--glowX', '50%');
        card.style.setProperty('--glowY', '50%');
        card.classList.remove('is-touching');
    }

    document.querySelectorAll('.spot').forEach((spot) => applyFireState(spot));
    attachTiltHandlers();
    window.addEventListener('resize', () => {
        queueFitCurrentPlayer();
        fitAllSplotEntries();
    });
});

    </script>
    <style>
        :root {
            --base-coal: #0C0B0B;
            --basalt: #131217;
            --char: #1B1A20;
            --ember: #DD2222;
            --furnace: #FF6A00;
            --sulfur: #F3C623;
            --ash: #A7A7A7;
            --bone: #F2E9E4;
            --blood: #8A1111;
            --verdigris: #00D7A1;
            --steel: rgba(180, 170, 150, 0.35);
            --shadow-strong: rgba(0, 0, 0, 0.92);
            --shadow-soft: rgba(0, 0, 0, 0.45);
            --gutter: 24px;
            --font-display: 'Cinzel Decorative', 'UnifrakturCook', serif;
            --font-body: 'Inter', 'Rubik', sans-serif;
            --electric-border-color: #dd8448;
            --electric-border-light: #f6c29a;
            --electric-gradient-accent: rgba(221, 132, 72, 0.45);
            --electric-neutral-900: #1f1510;
        }

        *, *::before, *::after {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(180deg, var(--base-coal) 0%, var(--basalt) 55%, var(--char) 100%);
            color: var(--bone);
            font-family: var(--font-body);
            letter-spacing: 0.02em;
            overflow: hidden;
        }

        body::before {
            content: '';
            position: fixed;
            inset: 0;
            pointer-events: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='140' height='140'%3E%3Cfilter id='n'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23n)' opacity='0.12'/%3E%3C/svg%3E");
            mix-blend-mode: screen;
            opacity: 0.15;
            z-index: 0;
        }

        audio#hellfire {
            display: none;
        }

        .container {
            position: relative;
            z-index: 1;
            width: 760px;
            height: 1080px;
            padding: 32px 32px;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            gap: 18px;
            isolation: isolate;
        }

        .container::before {
            content: '';
            position: absolute;
            inset: 24px;
            border-radius: 32px;
            background: radial-gradient(120% 140% at 50% 0%, rgba(255, 106, 0, 0.22) 0%, rgba(210, 34, 34, 0.08) 35%, transparent 70%);
            opacity: 0.35;
            pointer-events: none;
            z-index: -1;
        }

        header.brand-lockup {
            position: relative;
            padding: 24px 24px 20px;
            text-align: center;
            background: rgba(12, 11, 11, 0.82);
            border-radius: 16px;
            border: 1px solid rgba(243, 198, 35, 0.22);
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.03), 0 18px 32px -26px rgba(0, 0, 0, 0.8);
            text-transform: uppercase;
            overflow: hidden;
            min-height: 120px;
        }

        header.brand-lockup::before {
            content: '';
            position: absolute;
            inset: 6px;
            border-radius: 12px;
            border: 1px solid rgba(255, 106, 0, 0.25);
            pointer-events: none;
            opacity: 0.35;
            z-index: 1;
        }

        .brand-lockup-flames {
            position: absolute;
            inset: 0;
            border-radius: inherit;
            pointer-events: none;
            overflow: hidden;
            z-index: 0;
            opacity: 0.9;
            mix-blend-mode: screen;
        }

        .brand-lockup-flames canvas,
        .brand-lockup-flames-canvas {
            width: 100%;
            height: 100%;
            display: block;
        }

        .brand-lockup-content {
            position: relative;
            z-index: 2;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 6px;
            height: 100%;
        }

        header.brand-lockup h1 {
            margin: 0;
            font-family: var(--font-display);
            font-size: 2.2rem;
            letter-spacing: 0.18em;
            text-shadow: 0 0 16px rgba(255, 106, 0, 0.35);
        }

        header.brand-lockup .tagline {
            display: block;
            margin-top: 4px;
            font-size: 0.65rem;
            letter-spacing: 0.32em;
            color: rgba(167, 167, 167, 0.85);
        }

        .top-bar {
            position: relative;
            display: grid;
            grid-template-columns: minmax(0, 1.05fr) auto minmax(0, 1.65fr);
            align-items: stretch;
            gap: 18px;
            padding: 12px 20px;
            border-radius: 14px;
            border: 1px solid rgba(243, 198, 35, 0.16);
            background: linear-gradient(180deg, rgba(19, 18, 23, 0.9), rgba(12, 11, 11, 0.88));
            box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.04), 0 14px 26px -22px rgba(0, 0, 0, 0.85);
        }

        .status-cluster {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 6px;
            text-transform: uppercase;
            letter-spacing: 0.08em;
            color: var(--ash);
            min-width: 0;
        }

        .status-label {
            font-size: 0.55rem;
            letter-spacing: 0.28em;
            text-transform: uppercase;
            color: rgba(243, 198, 35, 0.75);
            opacity: 0.8;
        }

        .timer-cluster {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .status-line {
            margin: 0;
            width: 100%;
            font-family: var(--font-display);
            font-size: var(--current-player-font-size, 1.85rem);
            line-height: 1.05;
            color: var(--bone);
            letter-spacing: 0.04em;
            text-transform: uppercase;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            text-shadow: 0 0 16px rgba(0, 0, 0, 0.45);
        }

        .timer-shell {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #timer_display {
            position: relative;
            width: 78px;
            height: 78px;
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 2px;
            color: var(--bone);
            background: radial-gradient(circle at 50% 30%, rgba(255, 106, 0, 0.28), rgba(12, 11, 11, 0.92));
            border: 1px solid rgba(243, 198, 35, 0.18);
            box-shadow: inset 0 0 12px rgba(0, 0, 0, 0.85), 0 0 32px rgba(255, 106, 0, 0.16);
            transition: box-shadow 200ms ease, border-color 200ms ease, color 200ms ease;
            overflow: hidden;
        }

        #timer_display::before {
            content: '';
            position: absolute;
            inset: -10px;
            border-radius: 50%;
            border: 1px solid rgba(255, 106, 0, 0.26);
            opacity: 0.35;
            filter: blur(0.5px);
        }

        #timer_display::after {
            content: '';
            position: absolute;
            inset: -16px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(255, 106, 0, 0.18) 0%, transparent 60%);
            opacity: 0.85;
            pointer-events: none;
            animation: timer-pulse 4s ease-in-out infinite;
        }

        #timer_display .timer-flipper {
            position: relative;
            width: 100%;
            height: 100%;
            transform-style: preserve-3d;
            transition: transform 600ms cubic-bezier(0.4, 0.1, 0.2, 1);
        }

        #timer_display.is-showing-hell .timer-flipper {
            transform: rotateY(180deg);
        }

        .timer-face {
            position: absolute;
            inset: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 4px;
            backface-visibility: hidden;
            transform: rotateY(0deg);
        }

        .timer-face--hell {
            transform: rotateY(180deg);
        }

        #timer_display .timer-label {
            font-size: 0.52rem;
            font-weight: 600;
            letter-spacing: 0.4em;
            opacity: 0.7;
        }

        .timer-value {
            font-family: var(--font-display);
            font-size: 1.1rem;
            letter-spacing: 0.1em;
        }

        #timer_display.prefers-reduced-motion .timer-flipper {
            transform: none;
            transition: none;
        }

        #timer_display.prefers-reduced-motion .timer-face {
            position: absolute;
            inset: 0;
            opacity: 0;
            transform: none;
            transition: opacity 200ms ease;
        }

        #timer_display.prefers-reduced-motion .timer-face.is-active {
            opacity: 1;
            position: relative;
        }

        .board-frame {
            position: relative;
            flex: 0 0 720px;
            padding: 32px;
            border-radius: 28px;
            background: linear-gradient(180deg, rgba(19, 18, 23, 0.88), rgba(12, 11, 11, 0.95));
            border: 1px solid rgba(138, 17, 17, 0.28);
            box-shadow: inset 0 0 60px rgba(0, 0, 0, 0.85), 0 32px 60px -48px rgba(0, 0, 0, 0.9);
            overflow: hidden;
            display: flex;
            align-items: stretch;
        }

        .board-frame::before {
            content: '';
            position: absolute;
            inset: -20% -30% -60% -30%;
            background: radial-gradient(80% 100% at 50% 100%, rgba(255, 106, 0, 0.24), transparent 70%);
            opacity: 0.6;
            pointer-events: none;
        }

        .board-frame::after {
            content: '';
            position: absolute;
            inset: 0;
            background: linear-gradient(0deg, rgba(210, 34, 34, 0.18), transparent 60%);
            opacity: 0.35;
            pointer-events: none;
        }

        .board-background-root {
            position: absolute;
            inset: 0;
            pointer-events: none;
            z-index: 1;
            overflow: hidden;
        }

        .grid {
            position: relative;
            z-index: 2;
            display: grid;
            grid-template-columns: repeat(2, minmax(0, 1fr));
            grid-template-rows: repeat(4, minmax(0, 1fr));
            gap: var(--gutter);
            width: 100%;
        }

        .spot {
            position: relative;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            gap: 16px;
            padding: 24px 24px 20px;
            border-radius: 18px;
            background: linear-gradient(180deg, rgba(29, 27, 32, 0.94), rgba(12, 11, 11, 0.9));
            border: 1px solid rgba(243, 198, 35, 0.12);
            box-shadow: inset 0 0 18px rgba(0, 0, 0, 0.85), 0 16px 32px -28px rgba(0, 0, 0, 0.8);
            color: var(--bone);
            overflow: hidden;
            transition: transform 220ms ease, box-shadow 220ms ease, border-color 220ms ease, filter 220ms ease;
        }

        .spot::before {
            content: '';
            position: absolute;
            inset: -15% -10%;
            background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='240' height='240'%3E%3Cpath d='M62 16c22 12 12 30-6 40s-42 20-38 42 32 28 44 46 6 42 32 48 40-18 66-24 58 16 72-6 0-52-16-74-44-30-64-44-12-28-32-40-48-8-58 12z' fill='rgba(255,106,0,0.08)'/%3E%3C/svg%3E") center/cover no-repeat;
            opacity: 0.25;
            mix-blend-mode: screen;
            pointer-events: none;
        }

        .spot::after {
            content: '';
            position: absolute;
            inset: 0;
            border-radius: inherit;
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.02);
            opacity: 0.6;
            pointer-events: none;
        }

        .hellfire-aura,
        .hellfire-embers,
        .hellfire-tag {
            position: absolute;
            pointer-events: none;
            opacity: 0;
            transition: opacity 220ms ease, transform 220ms ease, filter 220ms ease;
        }

        .hellfire-embers {
            left: 14px;
            right: 14px;
            bottom: 14px;
            height: 74px;
            display: block;
            transform-origin: bottom center;
            z-index: 1;
        }

        .hellfire-embers-canvas {
            width: 100%;
            height: 100%;
            display: block;
            pointer-events: none;
        }

        .hellfire-tag {
            top: 1px;
            left: -10px;
            padding: 6px 20px;
            border-radius: 999px;
            background: linear-gradient(110deg, rgba(255, 82, 0, 0.95), rgba(82, 0, 0, 0.92));
            font-size: 0.58rem;
            font-weight: 700;
            letter-spacing: 0.46em;
            text-transform: uppercase;
            color: rgba(255, 236, 210, 0.92);
            text-align: center;
            box-shadow: 0 0 18px rgba(255, 72, 0, 0.55), inset 0 0 14px rgba(0, 0, 0, 0.55);
            transform: rotate(12deg) translateX(26px);
            z-index: 2;
        }

        /* Enhanced Hellfire Spot Styles - Replace existing .is-hellfire styles */
        
        .spot.is-hellfire,
        .spot[data-hellfire="true"],
        .spot[data-state="hellfire"] {
            /* More dramatic gradient matching brand header */
            background: 
                radial-gradient(ellipse 140% 180% at 50% 120%, rgba(255, 82, 0, 0.5) 0%, rgba(138, 17, 17, 0.75) 45%, rgba(12, 11, 11, 0.95) 80%),
                linear-gradient(180deg, rgba(50, 8, 0, 0.92), rgba(8, 2, 0, 0.98));
            border-color: rgba(255, 140, 40, 0.92);
            box-shadow: 
                inset 0 0 60px rgba(255, 70, 0, 0.55),
                inset 0 -20px 40px rgba(255, 140, 0, 0.25),
                0 0 50px rgba(255, 50, 0, 0.4), 
                0 35px 55px -24px rgba(255, 106, 0, 0.6);
            animation: hellfire-pulse-enhanced 2s ease-in-out infinite alternate;
            transform: translateY(-3px);
        }

        .spot.is-hellfire::before,
        .spot[data-hellfire="true"]::before,
        .spot[data-state="hellfire"]::before {
            /* Flame-like organic shape */
            inset: -40% -28% -48%;
            background: 
                radial-gradient(ellipse 90% 140% at 50% 110%, 
                    rgba(255, 170, 60, 0.6) 0%, 
                    rgba(255, 100, 20, 0.45) 30%,
                    transparent 75%);
            opacity: 0.9;
            animation: hellfire-flicker-enhanced 2.2s ease-in-out infinite;
            filter: blur(14px);
        }

        .spot.is-hellfire::after,
        .spot[data-hellfire="true"]::after,
        .spot[data-state="hellfire"]::after {
            box-shadow: 
                inset 0 0 0 1px rgba(255, 220, 180, 0.18),
                inset 0 -4px 12px rgba(255, 140, 0, 0.3),
                0 0 0 1px rgba(255, 100, 0, 0.35);
            opacity: 0.95;
        }

        /* Enhanced Hellfire Aura */
        .spot.is-hellfire .hellfire-aura,
        .spot[data-hellfire="true"] .hellfire-aura,
        .spot[data-state="hellfire"] .hellfire-aura {
            opacity: 0.92;
            transform: scale(1.05);
            animation: hellfire-aura-pulse 3.2s ease-in-out infinite alternate;
            background: conic-gradient(
                from 135deg,
                rgba(255, 60, 0, 0) 0%,
                rgba(255, 120, 30, 0.6) 15%,
                rgba(255, 50, 0, 0.85) 30%,
                rgba(255, 160, 60, 0.55) 50%,
                rgba(255, 60, 0, 0) 100%
            );
            filter: blur(36px) saturate(1.3);
        }

        /* Enhanced Hellfire Number Badge */
        .spot.is-hellfire .spot-number,
        .spot[data-hellfire="true"] .spot-number,
        .spot[data-state="hellfire"] .spot-number {
            background: 
                radial-gradient(circle at 50% 35%, 
                    rgba(255, 245, 220, 0.98) 0%, 
                    rgba(255, 140, 30, 0.98) 50%, 
                    rgba(100, 20, 0, 1) 100%);
            border: 2px solid rgba(255, 220, 180, 0.9);
            box-shadow: 
                inset 0 2px 8px rgba(255, 255, 255, 0.4),
                inset 0 -2px 12px rgba(80, 0, 0, 0.6),
                0 0 32px rgba(255, 150, 50, 0.7),
                0 0 16px rgba(255, 100, 0, 0.8);
            color: #1a0600;
            text-shadow: 
                0 0 14px rgba(255, 230, 200, 0.9), 
                0 1px 2px rgba(255, 255, 255, 0.5),
                0 4px 18px rgba(255, 100, 0, 0.6);
            animation: hellfire-number-enhanced 1.3s ease-in-out infinite alternate;
        }

        .spot.is-hellfire .spot-number::after,
        .spot[data-hellfire="true"] .spot-number::after,
        .spot[data-state="hellfire"] .spot-number::after {
            border: 1px solid rgba(255, 180, 80, 0.7);
            opacity: 0.95;
            box-shadow: 0 0 8px rgba(255, 150, 60, 0.5);
        }

        /* Enhanced Hellfire Tag */
        .spot.is-hellfire .hellfire-tag,
        .spot[data-hellfire="true"] .hellfire-tag,
        .spot[data-state="hellfire"] .hellfire-tag {
            opacity: 1;
            transform: rotate(-8deg) translateX(0);
            background: linear-gradient(115deg, 
                rgba(255, 100, 10, 0.96), 
                rgba(180, 40, 0, 0.94));
            box-shadow: 
                0 0 24px rgba(255, 90, 0, 0.65), 
                inset 0 1px 4px rgba(255, 200, 150, 0.4),
                inset 0 -2px 10px rgba(0, 0, 0, 0.6);
            animation: hellfire-tag-enhanced 3s ease-in-out infinite;
        }

        /* Embers Container Enhancement */
        .spot.is-hellfire .hellfire-embers,
        .spot[data-hellfire="true"] .hellfire-embers,
        .spot[data-state="hellfire"] .hellfire-embers {
            opacity: 1;
            height: 85px;
            bottom: 10px;
        }

        /* Enhanced Text Glow */
        .spot.is-hellfire .splotEntry,
        .spot[data-hellfire="true"] .splotEntry,
        .spot[data-state="hellfire"] .splotEntry {
            color: rgba(255, 245, 235, 0.98);
            text-shadow: 
                0 0 20px rgba(255, 100, 30, 0.65), 
                0 0 8px rgba(255, 200, 150, 0.4),
                0 2px 6px rgba(0, 0, 0, 0.8);
        }

        /* Enhanced Use Count */
        .spot.is-hellfire .use-count,
        .spot[data-hellfire="true"] .use-count,
        .spot[data-state="hellfire"] .use-count {
            color: rgba(255, 240, 210, 0.96);
            background: linear-gradient(115deg,
                rgba(100, 20, 0, 0.92),
                rgba(255, 100, 20, 0.65));
            border-color: rgba(255, 160, 60, 0.6);
            box-shadow:
                inset 0 0 20px rgba(0, 0, 0, 0.8),
                inset 0 1px 4px rgba(255, 200, 150, 0.3),
                0 0 28px rgba(255, 100, 30, 0.35);
        }

        /* Heavenfire Spot Styles */
        .spot.is-heavenfire,
        .spot[data-heavenfire="true"],
        .spot[data-state="heavenfire"] {
            background:
                radial-gradient(ellipse 135% 175% at 50% 120%, rgba(210, 236, 255, 0.7) 0%, rgba(132, 186, 255, 0.58) 42%, rgba(20, 34, 80, 0.92) 85%),
                linear-gradient(180deg, rgba(18, 26, 58, 0.95), rgba(8, 12, 32, 0.98));
            border-color: rgba(172, 212, 255, 0.82);
            box-shadow:
                inset 0 0 58px rgba(140, 190, 255, 0.42),
                inset 0 -18px 42px rgba(210, 240, 255, 0.3),
                0 0 48px rgba(120, 190, 255, 0.38),
                0 35px 55px -22px rgba(90, 150, 235, 0.55);
            animation: heavenfire-pulse 2.6s ease-in-out infinite alternate;
            transform: translateY(-2px);
        }

        .spot.is-heavenfire::before,
        .spot[data-heavenfire="true"]::before,
        .spot[data-state="heavenfire"]::before {
            inset: -42% -30% -46%;
            background:
                radial-gradient(ellipse 95% 145% at 50% 110%,
                    rgba(255, 255, 255, 0.55) 0%,
                    rgba(202, 232, 255, 0.45) 32%,
                    rgba(120, 195, 255, 0.32) 52%,
                    transparent 78%);
            opacity: 0.92;
            filter: blur(20px) saturate(1.2);
            animation: heavenfire-flicker 2.4s ease-in-out infinite;
        }

        .spot.is-heavenfire::after,
        .spot[data-heavenfire="true"]::after,
        .spot[data-state="heavenfire"]::after {
            box-shadow:
                inset 0 0 0 1px rgba(220, 240, 255, 0.22),
                inset 0 -4px 12px rgba(150, 200, 255, 0.28),
                0 0 0 1px rgba(180, 220, 255, 0.35);
            opacity: 0.92;
        }

        .spot.is-heavenfire .hellfire-aura,
        .spot[data-heavenfire="true"] .hellfire-aura,
        .spot[data-state="heavenfire"] .hellfire-aura {
            opacity: 0.94;
            transform: scale(1.06);
            animation: heavenfire-aura 3.4s ease-in-out infinite alternate;
            background: conic-gradient(
                from 145deg,
                rgba(180, 220, 255, 0) 0%,
                rgba(210, 240, 255, 0.65) 18%,
                rgba(150, 200, 255, 0.75) 38%,
                rgba(235, 250, 255, 0.6) 60%,
                rgba(180, 220, 255, 0) 100%
            );
            filter: blur(40px) saturate(1.2);
        }

        .spot.is-heavenfire .hellfire-embers,
        .spot[data-heavenfire="true"] .hellfire-embers,
        .spot[data-state="heavenfire"] .hellfire-embers {
            opacity: 0.95;
            height: 90px;
            bottom: 12px;
            filter: drop-shadow(0 0 12px rgba(200, 230, 255, 0.5));
        }

        .spot.is-heavenfire .spot-number,
        .spot[data-heavenfire="true"] .spot-number,
        .spot[data-state="heavenfire"] .spot-number {
            background:
                radial-gradient(circle at 50% 32%,
                    rgba(255, 255, 255, 0.96) 0%,
                    rgba(215, 238, 255, 0.96) 44%,
                    rgba(68, 116, 176, 1) 100%);
            border: 2px solid rgba(215, 238, 255, 0.92);
            box-shadow:
                inset 0 2px 8px rgba(255, 255, 255, 0.5),
                inset 0 -2px 12px rgba(30, 60, 110, 0.45),
                0 0 32px rgba(180, 220, 255, 0.65),
                0 0 18px rgba(150, 200, 255, 0.66);
            color: #0c1c2a;
            text-shadow:
                0 0 14px rgba(255, 255, 255, 0.8),
                0 1px 3px rgba(255, 255, 255, 0.52),
                0 4px 14px rgba(90, 150, 220, 0.4);
            animation: heavenfire-number 1.6s ease-in-out infinite alternate;
        }

        .spot.is-heavenfire .spot-number::after,
        .spot[data-heavenfire="true"] .spot-number::after,
        .spot[data-state="heavenfire"] .spot-number::after {
            border: 1px solid rgba(210, 235, 255, 0.75);
            opacity: 0.92;
            box-shadow: 0 0 10px rgba(180, 220, 255, 0.58);
        }

        .spot.is-heavenfire .splotEntry,
        .spot[data-heavenfire="true"] .splotEntry,
        .spot[data-state="heavenfire"] .splotEntry {
            color: rgba(245, 250, 255, 0.98);
            text-shadow:
                0 0 16px rgba(170, 210, 255, 0.6),
                0 2px 8px rgba(10, 20, 35, 0.65);
        }

        .spot.is-heavenfire .use-count,
        .spot[data-heavenfire="true"] .use-count,
        .spot[data-state="heavenfire"] .use-count {
            color: rgba(220, 235, 255, 0.96);
            background: linear-gradient(120deg,
                rgba(42, 78, 122, 0.88),
                rgba(180, 216, 255, 0.68));
            border-color: rgba(200, 225, 255, 0.7);
            box-shadow:
                inset 0 0 18px rgba(0, 0, 0, 0.6),
                inset 0 1px 6px rgba(210, 235, 255, 0.4),
                0 0 28px rgba(160, 200, 255, 0.35);
        }

        .spot.is-heavenfire .hellfire-tag,
        .hellfire-tag[data-fire-theme="heavenfire"] {
            opacity: 1;
            transform: rotate(6deg) translateX(6px);
            background: linear-gradient(120deg,
                rgba(240, 248, 255, 0.96),
                rgba(168, 206, 255, 0.9));
            color: rgba(18, 38, 68, 0.9);
            box-shadow:
                0 0 24px rgba(170, 210, 255, 0.6),
                inset 0 1px 4px rgba(255, 255, 255, 0.65),
                inset 0 -2px 8px rgba(30, 40, 75, 0.35);
            border: 1px solid rgba(190, 220, 255, 0.6);
            animation: heavenfire-tag 3.6s ease-in-out infinite;
        }

        .spot.is-heavenfire:hover,
        .spot[data-heavenfire="true"]:hover,
        .spot[data-state="heavenfire"]:hover {
            transform: translateY(-6px);
            box-shadow:
                inset 0 0 70px rgba(170, 215, 255, 0.55),
                inset 0 -28px 45px rgba(230, 250, 255, 0.28),
                0 0 58px rgba(150, 210, 255, 0.5),
                0 40px 60px -24px rgba(130, 190, 255, 0.65);
        }

        .spot.is-heavenfire.is-heavenfire-highlight,
        .spot[data-heavenfire="true"].is-heavenfire-highlight,
        .spot[data-state="heavenfire"].is-heavenfire-highlight {
            animation:
                heavenfire-pulse 1.4s ease-in-out infinite alternate,
                heavenfire-shake 0.6s cubic-bezier(0.68, 0.05, 0.35, 1.5) 0s 2;
            box-shadow:
                inset 0 0 76px rgba(170, 215, 255, 0.62),
                inset 0 -28px 52px rgba(220, 245, 255, 0.36),
                0 0 68px rgba(150, 205, 255, 0.62),
                0 42px 70px -22px rgba(120, 185, 255, 0.7);
        }

        /* Enhanced Hover State */
        .spot.is-hellfire:hover,
        .spot[data-hellfire="true"]:hover,
        .spot[data-state="hellfire"]:hover {
            transform: translateY(-7px);
            box-shadow: 
                inset 0 0 70px rgba(255, 80, 0, 0.65),
                inset 0 -25px 50px rgba(255, 150, 40, 0.3),
                0 0 60px rgba(255, 60, 0, 0.55), 
                0 42px 65px -24px rgba(255, 120, 30, 0.7);
        }

        /* Enhanced Highlight State */
        .spot.is-hellfire.is-hellfire-highlight,
        .spot[data-hellfire="true"].is-hellfire-highlight,
        .spot[data-state="hellfire"].is-hellfire-highlight {
            animation: 
                hellfire-pulse-enhanced 1.2s ease-in-out infinite alternate, 
                hellfire-shake-enhanced 0.5s cubic-bezier(0.68, 0.05, 0.35, 1.5) 0s 2;
            box-shadow: 
                inset 0 0 80px rgba(255, 70, 0, 0.75),
                inset 0 -30px 60px rgba(255, 160, 50, 0.4),
                0 0 70px rgba(255, 50, 0, 0.7), 
                0 45px 75px -24px rgba(255, 130, 40, 0.8);
        }

        /* Enhanced Animations */
        @keyframes hellfire-pulse-enhanced {
            0% {
                box-shadow: 
                    inset 0 0 50px rgba(255, 60, 0, 0.45),
                    inset 0 -18px 35px rgba(255, 130, 30, 0.2),
                    0 0 40px rgba(255, 40, 0, 0.35), 
                    0 30px 48px -24px rgba(255, 100, 20, 0.52);
                filter: brightness(0.96) saturate(1.1);
            }
            50% {
                box-shadow: 
                    inset 0 0 75px rgba(255, 80, 0, 0.65),
                    inset 0 -24px 48px rgba(255, 150, 50, 0.32),
                    0 0 60px rgba(255, 60, 0, 0.5), 
                    0 38px 60px -20px rgba(255, 120, 40, 0.7);
                filter: brightness(1.08) saturate(1.25);
            }
            100% {
                box-shadow: 
                    inset 0 0 55px rgba(255, 65, 0, 0.5),
                    inset 0 -20px 38px rgba(255, 140, 35, 0.25),
                    0 0 45px rgba(255, 45, 0, 0.4), 
                    0 32px 50px -24px rgba(255, 105, 25, 0.58);
                filter: brightness(1) saturate(1.15);
            }
        }

        @keyframes hellfire-flicker-enhanced {
            0% {
                opacity: 0.65;
                filter: hue-rotate(-6deg) saturate(1.1) blur(14px);
            }
            25% {
                opacity: 0.95;
                filter: hue-rotate(8deg) saturate(1.4) blur(16px);
            }
            50% {
                opacity: 0.75;
                filter: hue-rotate(-3deg) saturate(1.2) blur(15px);
            }
            75% {
                opacity: 1;
                filter: hue-rotate(10deg) saturate(1.35) blur(17px);
            }
            100% {
                opacity: 0.7;
                filter: hue-rotate(0deg) saturate(1.15) blur(14px);
            }
        }

        @keyframes hellfire-aura-pulse {
            0% {
                opacity: 0.8;
                transform: scale(1.02) rotate(0deg);
            }
            50% {
                opacity: 1;
                transform: scale(1.08) rotate(2deg);
            }
            100% {
                opacity: 0.85;
                transform: scale(1.05) rotate(-1deg);
            }
        }

        @keyframes hellfire-number-enhanced {
            0% {
                transform: translateY(0) scale(1);
                box-shadow: 
                    inset 0 2px 8px rgba(255, 255, 255, 0.35),
                    inset 0 -2px 12px rgba(80, 0, 0, 0.5),
                    0 0 28px rgba(255, 140, 40, 0.65),
                    0 0 14px rgba(255, 90, 0, 0.75);
            }
            50% {
                transform: translateY(-1px) scale(1.05);
                box-shadow: 
                    inset 0 2px 10px rgba(255, 255, 255, 0.45),
                    inset 0 -2px 14px rgba(80, 0, 0, 0.65),
                    0 0 36px rgba(255, 160, 60, 0.8),
                    0 0 18px rgba(255, 110, 20, 0.85);
            }
            100% {
                transform: translateY(1px) scale(0.96);
                box-shadow: 
                    inset 0 2px 6px rgba(255, 255, 255, 0.3),
                    inset 0 -2px 10px rgba(80, 0, 0, 0.55),
                    0 0 24px rgba(255, 130, 35, 0.6),
                    0 0 12px rgba(255, 85, 0, 0.7);
            }
        }

        @keyframes hellfire-tag-enhanced {
            0%, 100% {
                filter: drop-shadow(0 0 16px rgba(255, 110, 20, 0.75));
                transform: rotate(-8deg) translateX(0) scale(1);
            }
            33% {
                filter: drop-shadow(0 0 26px rgba(255, 180, 60, 0.9));
                transform: rotate(-7deg) translateX(0) scale(1.02);
            }
            66% {
                filter: drop-shadow(0 0 20px rgba(255, 140, 40, 0.8));
                transform: rotate(-9deg) translateX(0) scale(0.99);
            }
        }

        @keyframes hellfire-shake-enhanced {
            0% {
                transform: translate3d(0, -3px, 0) rotate(0deg);
            }
            20% {
                transform: translate3d(3px, -2px, 0) rotate(-1deg);
            }
            40% {
                transform: translate3d(-3px, -4px, 0) rotate(0.8deg);
            }
            60% {
                transform: translate3d(2px, -2px, 0) rotate(-0.5deg);
            }
            80% {
                transform: translate3d(-2px, -3px, 0) rotate(0.3deg);
            }
            100% {
                transform: translate3d(0, -3px, 0) rotate(0deg);
            }
        }

        @keyframes heavenfire-pulse {
            0% {
                box-shadow:
                    inset 0 0 50px rgba(160, 205, 255, 0.38),
                    inset 0 -16px 36px rgba(210, 240, 255, 0.24),
                    0 0 42px rgba(150, 205, 255, 0.35),
                    0 30px 50px -24px rgba(110, 170, 240, 0.48);
                filter: brightness(1) saturate(1.12);
            }
            50% {
                box-shadow:
                    inset 0 0 72px rgba(185, 225, 255, 0.55),
                    inset 0 -24px 48px rgba(230, 248, 255, 0.35),
                    0 0 62px rgba(165, 215, 255, 0.52),
                    0 38px 62px -20px rgba(125, 190, 255, 0.65);
                filter: brightness(1.08) saturate(1.28);
            }
            100% {
                box-shadow:
                    inset 0 0 56px rgba(170, 215, 255, 0.42),
                    inset 0 -18px 40px rgba(215, 240, 255, 0.28),
                    0 0 48px rgba(150, 205, 255, 0.38),
                    0 32px 54px -24px rgba(115, 175, 240, 0.52);
                filter: brightness(1.02) saturate(1.16);
            }
        }

        @keyframes heavenfire-flicker {
            0% {
                opacity: 0.68;
                filter: hue-rotate(-6deg) saturate(1.1) blur(18px);
            }
            25% {
                opacity: 1;
                filter: hue-rotate(12deg) saturate(1.35) blur(20px);
            }
            50% {
                opacity: 0.78;
                filter: hue-rotate(-4deg) saturate(1.2) blur(19px);
            }
            75% {
                opacity: 0.98;
                filter: hue-rotate(14deg) saturate(1.33) blur(21px);
            }
            100% {
                opacity: 0.7;
                filter: hue-rotate(0deg) saturate(1.18) blur(18px);
            }
        }

        @keyframes heavenfire-aura {
            0% {
                opacity: 0.82;
                transform: scale(1.04) rotate(-1deg);
            }
            50% {
                opacity: 1;
                transform: scale(1.1) rotate(2deg);
            }
            100% {
                opacity: 0.88;
                transform: scale(1.06) rotate(-1deg);
            }
        }

        @keyframes heavenfire-number {
            0% {
                transform: translateY(0) scale(1);
                box-shadow:
                    inset 0 2px 8px rgba(255, 255, 255, 0.45),
                    inset 0 -2px 10px rgba(30, 60, 110, 0.4),
                    0 0 28px rgba(170, 215, 255, 0.55),
                    0 0 14px rgba(130, 190, 255, 0.6);
            }
            50% {
                transform: translateY(-1px) scale(1.04);
                box-shadow:
                    inset 0 2px 12px rgba(255, 255, 255, 0.6),
                    inset 0 -2px 14px rgba(28, 56, 102, 0.55),
                    0 0 38px rgba(185, 225, 255, 0.75),
                    0 0 18px rgba(150, 205, 255, 0.7);
            }
            100% {
                transform: translateY(1px) scale(0.97);
                box-shadow:
                    inset 0 2px 6px rgba(255, 255, 255, 0.35),
                    inset 0 -2px 10px rgba(34, 62, 108, 0.45),
                    0 0 26px rgba(165, 215, 255, 0.48),
                    0 0 12px rgba(135, 190, 255, 0.52);
            }
        }

        @keyframes heavenfire-tag {
            0%, 100% {
                filter: drop-shadow(0 0 18px rgba(170, 215, 255, 0.75));
                transform: rotate(6deg) translateX(6px) scale(1);
            }
            33% {
                filter: drop-shadow(0 0 26px rgba(200, 235, 255, 0.9));
                transform: rotate(5deg) translateX(6px) scale(1.03);
            }
            66% {
                filter: drop-shadow(0 0 20px rgba(150, 205, 255, 0.78));
                transform: rotate(7deg) translateX(6px) scale(0.99);
            }
        }

        @keyframes heavenfire-shake {
            0% {
                transform: translate3d(0, -2px, 0) rotate(0deg);
            }
            20% {
                transform: translate3d(2px, -1px, 0) rotate(1deg);
            }
            40% {
                transform: translate3d(-2px, -3px, 0) rotate(-0.8deg);
            }
            60% {
                transform: translate3d(1px, -1px, 0) rotate(0.6deg);
            }
            80% {
                transform: translate3d(-1px, -2px, 0) rotate(-0.4deg);
            }
            100% {
                transform: translate3d(0, -2px, 0) rotate(0deg);
            }
        }

        /* Accessibility: Respect reduced motion */
        @media (prefers-reduced-motion: reduce) {
            .spot.is-hellfire,
            .spot[data-hellfire="true"],
            .spot[data-state="hellfire"],
            .spot.is-heavenfire,
            .spot[data-heavenfire="true"],
            .spot[data-state="heavenfire"],
            .spot.is-hellfire .spot-number,
            .spot[data-hellfire="true"] .spot-number,
            .spot[data-state="hellfire"] .spot-number,
            .spot.is-heavenfire .spot-number,
            .spot[data-heavenfire="true"] .spot-number,
            .spot[data-state="heavenfire"] .spot-number,
            .hellfire-aura,
            .hellfire-embers,
            .hellfire-embers-canvas,
            .hellfire-tag {
                animation: none !important;
            }
        }
        .spot:hover,
        .spot:focus-within {
            transform: translateY(-4px);
            border-color: rgba(255, 106, 0, 0.45);
            box-shadow: inset 0 0 24px rgba(0, 0, 0, 0.75), 0 24px 45px -34px rgba(255, 106, 0, 0.35);
        }

        .spot h2 {
            position: relative;
            display: flex;
            align-items: flex-start;
            gap: 18px;
            margin: 0;
            font-size: 1.05rem;
            letter-spacing: 0.08em;
            text-transform: uppercase;
            font-weight: 600;
        }

        .spot-number {
            position: relative;
            width: 58px;
            height: 58px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-family: var(--font-display);
            font-size: 1.4rem;
            color: var(--bone);
            background: radial-gradient(circle at 35% 30%, rgba(243, 198, 35, 0.28), rgba(138, 17, 17, 0.9));
            border: 2px solid rgba(243, 198, 35, 0.3);
            box-shadow: inset 0 0 12px rgba(0, 0, 0, 0.7), 0 0 12px rgba(210, 34, 34, 0.38);
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.65);
            flex: 0 0 58px;
            min-width: 58px;
            margin-top: 2px;
        }

        .spot-number::after {
            content: '';
            position: absolute;
            inset: 4px;
            border-radius: 50%;
            border: 1px dashed rgba(243, 198, 35, 0.28);
            opacity: 0.6;
        }

        .splotEntry {
            display: block;
            flex: 1 1 auto;
            min-width: 0;
            font-size: var(--splot-entry-font-size, 1rem);
            line-height: 1.2;
            font-weight: 600;
            color: var(--bone);
            text-shadow: 0 0 12px rgba(0, 0, 0, 0.55);
        }

        /* Clamp long titles to two lines to avoid overflow 
        .splotEntry {
            overflow-wrap: anywhere;
            word-break: break-word;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }*/

        .use-count {
            position: relative;
            align-self: flex-end;
            margin-top: auto;
            padding: 8px 12px;
            font-size: 0.78rem;
            letter-spacing: 0.15em;
            text-transform: uppercase;
            color: rgba(243, 198, 35, 0.85);
            background: linear-gradient(90deg, rgba(138, 17, 17, 0.65), rgba(12, 11, 11, 0.9));
            border: 1px solid rgba(243, 198, 35, 0.35);
            border-radius: 8px;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.65);
        }

        .use-count::before {
            content: '';
            position: absolute;
            inset: 2px;
            border-radius: 6px;
            border: 1px dashed rgba(243, 198, 35, 0.4);
            opacity: 0.35;
            transform: skew(-6deg);
        }

        .spot.blink_me,
        #timer_display.blink_me {
            animation: ember-blink 0.66s ease-in-out infinite alternate;
        }

        .spot.is-selected,
        .spot[data-state="selected"] {
            border-color: rgba(255, 106, 0, 0.6);
            box-shadow: inset 0 0 36px rgba(255, 106, 0, 0.22), 0 0 42px -16px rgba(255, 106, 0, 0.45);
        }

        .spot.is-locked,
        .spot[data-state="locked"] {
            filter: grayscale(0.25) brightness(0.8);
            border-color: rgba(167, 167, 167, 0.3);
        }

        .spot.is-spent,
        .spot[data-state="spent"] {
            background: linear-gradient(180deg, rgba(60, 55, 60, 0.95), rgba(20, 18, 25, 0.88));
            border-color: rgba(167, 167, 167, 0.2);
        }

        .spot[data-motion="static"]::before {
            display: none;
        }

        /* removed EJS electric-border special card styles; programmatic borders will style .spot */

        .breakaway-ribbon {
            position: relative;
            display: grid;
            grid-auto-flow: column;
            grid-auto-columns: minmax(150px, 1fr);
            gap: 12px;
            align-items: stretch;
            padding: 4px 0;
            overflow-x: auto;
            overflow-y: hidden;
            scrollbar-width: thin;
        }

        .breakaway-ribbon::-webkit-scrollbar {
            height: 6px;
        }

        .breakaway-ribbon::-webkit-scrollbar-track {
            background: rgba(12, 11, 11, 0.4);
        }

        .breakaway-ribbon::-webkit-scrollbar-thumb {
            background: rgba(243, 198, 35, 0.35);
            border-radius: 999px;
        }

        .breakaway-ribbon::before,
        .breakaway-ribbon::after {
            content: '';
            position: absolute;
            top: 0;
            bottom: 0;
            width: 32px;
            pointer-events: none;
            z-index: 2;
        }

        .breakaway-empty {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 14px 16px;
            border-radius: 16px;
            border: 1px solid rgba(243, 198, 35, 0.22);
            background: linear-gradient(180deg, rgba(25, 24, 30, 0.85), rgba(12, 11, 11, 0.88));
            font-size: 0.75rem;
            letter-spacing: 0.2em;
            text-transform: uppercase;
            color: rgba(242, 233, 228, 0.68);
        }

        .breakaway-col {
            position: relative;
            padding: 14px 16px;
            border-radius: 16px;
            background: linear-gradient(180deg, rgba(25, 24, 30, 0.95), rgba(12, 11, 11, 0.9));
            border: 1px solid rgba(210, 34, 34, 0.35);
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.02), 0 12px 24px -18px rgba(0, 0, 0, 0.85);
            overflow: hidden;
            min-width: 150px;
        }

        .breakaway-col:hover,
        .breakaway-col:focus-within {
            border-color: rgba(243, 198, 35, 0.45);
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.06), 0 18px 32px -20px rgba(255, 106, 0, 0.45);
        }

        .breakaway-col::before {
            content: '';
            position: absolute;
            inset: 0;
            background: radial-gradient(120% 160% at 0% 0%, rgba(255, 106, 0, 0.22), transparent 65%);
            opacity: 0.45;
            pointer-events: none;
        }

        .breakaway-col::after {
            content: '';
            position: absolute;
            inset: 2px;
            border-radius: 14px;
            border: 1px solid rgba(243, 198, 35, 0.18);
            opacity: 0.25;
            pointer-events: none;
        }

        .breakaway-content {
            position: relative;
            display: grid;
            grid-template-columns: minmax(0, 1fr) auto;
            gap: 12px;
            align-items: center;
            z-index: 1;
        }

        .breakaway-header {
            display: grid;
            gap: 2px;
        }

        .breakaway-label {
            font-size: 0.55rem;
            letter-spacing: 0.26em;
            text-transform: uppercase;
            color: rgba(243, 198, 35, 0.72);
            opacity: 0.9;
        }

        .breakaway-header h3 {
            margin: 0;
            font-family: var(--font-display);
            font-size: 0.95rem;
            letter-spacing: 0.14em;
            text-transform: uppercase;
            color: var(--bone);
            text-shadow: 0 0 10px rgba(0, 0, 0, 0.6);
        }

        .breakaway-counter {
            display: grid;
            gap: 4px;
            justify-items: center;
        }

        .counter-circle {
            width: 46px;
            height: 46px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(243, 198, 35, 0.86), rgba(210, 34, 34, 0.32));
            border: 2px solid rgba(243, 198, 35, 0.35);
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: var(--font-display);
            font-size: 1.24rem;
            font-weight: 700;
            letter-spacing: 0.04em;
            color: var(--char);
            text-shadow: 0 1px 3px rgba(255, 255, 255, 0.28);
            box-shadow: 0 0 14px rgba(243, 198, 35, 0.32);
        }

        .dice-roll-popup {
            position: fixed;
            width: 220px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 9999;
            background: linear-gradient(180deg, rgba(19, 18, 23, 0.94), rgba(12, 11, 11, 0.92));
            color: var(--bone);
            border: 1px solid rgba(243, 198, 35, 0.28);
            box-shadow: 0 20px 60px -44px rgba(0, 0, 0, 0.9), 0 0 32px rgba(255, 106, 0, 0.22);
            border-radius: 16px;
            padding: 24px 20px;
            backdrop-filter: blur(4px);
            transition: transform 220ms ease, box-shadow 220ms ease;
        }

        .dice-roll-popup:hover {
            transform: translate(-50%, -50%) scale(1.03);
            box-shadow: 0 18px 50px -30px rgba(255, 106, 0, 0.4);
        }

        .dice-roll-popup .inner-lcars {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .dice-roll-popup .die-name,
        .dice-roll-popup .roll-value,
        .dice-roll-popup .die-type {
            font-size: 1.2rem;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 12px;
            border-radius: 10px;
            background: rgba(12, 11, 11, 0.6);
            border: 1px solid rgba(243, 198, 35, 0.16);
            text-transform: uppercase;
            letter-spacing: 0.12em;
        }

        .dice-roll-popup .roll-value {
            font-size: 2.4rem;
            font-family: var(--font-display);
            color: var(--furnace);
            text-shadow: 0 0 18px rgba(255, 106, 0, 0.46);
        }

        .blink_me {
            animation: ember-blink 0.66s ease-in-out infinite alternate;
        }

        @keyframes ember-blink {
            from { filter: drop-shadow(0 0 8px rgba(255, 106, 0, 0.35)); }
            to { filter: drop-shadow(0 0 20px rgba(243, 198, 35, 0.65)); }
        }

        @keyframes timer-pulse {
            0%, 100% { opacity: 0.65; transform: scale(0.98); }
            50% { opacity: 0.95; transform: scale(1.05); }
        }


        @media (prefers-reduced-motion: reduce) {
            .spot,
            .dice-roll-popup,
            #timer_display,
            .board-background-root,
            .board-background-root * {
                transition-duration: 0.01ms !important;
                animation-duration: 0.01ms !important;
            }

            .board-background-root {
                display: none;
            }

            .tilt-card {
                transform: none !important;
            }

            .counter-circle {
                animation: none;
            }

            .blink_me {
                animation: none;
            }

            .spot.is-hellfire,
            .spot[data-hellfire="true"],
            .spot[data-state="hellfire"],
            .spot.is-heavenfire,
            .spot[data-heavenfire="true"],
            .spot[data-state="heavenfire"],
            .spot.is-hellfire .spot-number,
            .spot[data-hellfire="true"] .spot-number,
            .spot[data-state="hellfire"] .spot-number,
            .spot.is-heavenfire .spot-number,
            .spot[data-heavenfire="true"] .spot-number,
            .spot[data-state="heavenfire"] .spot-number,
            .hellfire-aura,
            .hellfire-embers,
            .hellfire-embers-canvas,
            .hellfire-tag {
                animation: none !important;
            }
        }

        @media (max-width: 720px) {
            .container {
                padding: 28px 20px 36px;
                gap: 24px;
            }

            .grid {
                grid-template-columns: 1fr;
            }

            .top-bar {
                grid-template-columns: 1fr;
                gap: 12px;
            }

            .timer-cluster {
                justify-content: flex-start;
            }

            .breakaway-ribbon {
                grid-auto-columns: minmax(160px, 1fr);
            }
        }

        @media (max-width: 480px) {
            header.brand-lockup {
                padding: 22px;
            }

            header.brand-lockup h1 {
                font-size: 2.4rem;
            }

            .status-cluster {
                flex-direction: column;
                align-items: flex-start;
            }

            #timer_display {
                width: 82px;
                height: 82px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <audio id="hellfire" src="https://cdn.leantube.org/hellfire.mp3?v=1714958299269"></audio>
        <header class="brand-lockup" aria-label="Bootcut Hellfire edition">
            <div id="brand-lockup-flames" class="brand-lockup-flames" aria-hidden="true"></div>
            <div class="brand-lockup-content">
                <h1>Hellfire Bootcut</h1>
                <span class="tagline">24 Hours of Tourment</span>
            </div>
        </header>
        <div class="top-bar">
            <div class="status-cluster" aria-live="polite" aria-atomic="true">
                <span class="status-label">Current Player</span>
                <p id="current_player" class="status-line">ZilchGnu</p>
            </div>
            <div class="timer-cluster">
                <div class="timer-shell">
                    <div id="timer_display" class="timer-ring" role="timer" aria-live="off" aria-atomic="true" data-active-face="turn">
                        <div class="timer-flipper">
                            <div class="timer-face timer-face--turn is-active" data-face="turn" aria-hidden="false">
                                <span class="timer-label">Turn</span>
                                <span id="timer_num" class="timer-value">0:00</span>
                            </div>
                            <div class="timer-face timer-face--hell" data-face="hell" aria-hidden="true">
                                <span class="timer-label">Hell</span>
                                <span id="hell_timer_num" class="timer-value">00:00</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="breakaway-ribbon" id="breakaway-react-root"></div>
        </div>
        <div class="board-frame">
            <div class="board-background-root" id="board-background-root" aria-hidden="true"></div>
            <div class="grid" id="board">
                <% board.forEach(function(dataRow) {
                    const spotIdString = String(dataRow.id);
                    const isHeavenfire = heavenFireSpotIdsStrings.includes(spotIdString);
                    const isHellfire = !isHeavenfire && hellfireSpotIdsStrings.includes(spotIdString);
                    const fireTheme = isHeavenfire ? 'heavenfire' : (isHellfire ? 'hellfire' : '');
                    const displayEntry = (fireTheme && dataRow.alt_entry) ? dataRow.alt_entry : dataRow.entry;
                    const displayDots = (fireTheme && dataRow.alt_splot_dot !== undefined && dataRow.alt_splot_dot !== null)
                        ? dataRow.alt_splot_dot
                        : dataRow.splot_dot;
                    const fireAttr = fireTheme ? ` data-fire-theme="${fireTheme}"` : '';
                    const fireTagLabel = fireTheme === 'heavenfire' ? 'Heavenfire' : (fireTheme === 'hellfire' ? 'Hellfire' : '');
                %>
                        <div class="spot tilt-card<%= isHeavenfire ? ' is-heavenfire' : (isHellfire ? ' is-hellfire' : '') %>" id='splot_<%= dataRow.id %>' data-spot-id="<%= dataRow.id %>"<%= isHeavenfire ? ' data-heavenfire="true"' : (isHellfire ? ' data-hellfire="true"' : '') %><%= fireAttr %>>
                            <div class="hellfire-aura" aria-hidden="true"<%= fireAttr %>></div>
                            <div class="hellfire-embers" aria-hidden="true"<%= fireAttr %>>
                                <canvas class="hellfire-embers-canvas" aria-hidden="true"<%= fireAttr %>></canvas>
                            </div>
                            <div class="hellfire-tag" aria-hidden="true"<%= fireAttr %>><%= fireTagLabel %></div>
                            <h2>
                                <span class="spot-number" id="splot_number_<%= dataRow.id %>">
                                    <%= dataRow.id %>
                                </span>
                                <span class="splotEntry" id='splotEntry_<%= dataRow.id %>'><%= displayEntry %></span>
                            </h2>
                            <p class="use-count" id="splot_count_<%= dataRow.id %>">Uses: <%= displayDots %></p>
                        </div>
                <% }); %>
            </div>
        </div>
    </div>
    <script type="module" src="/board-assets/board.js"></script>
</body>
</html>
