<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Futuristic Sub Tracker</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --neon-blue: #4dffff;
      --neon-purple: #bc13fe;
      --neon-pink: #ff36ab;
      --text-primary: #ffffff;
      --text-shadow: rgba(77, 255, 255, 0.8);
    }

    html, body {
      background: transparent !important;
    }

    body {
      font-family: 'Orbitron', sans-serif;
      color: var(--text-primary);
      margin: 0;
      padding: 8px;
      overflow: hidden;
    }

    .sub-tracker-container {
      border: 2px solid var(--neon-blue);
      border-radius: 10px;
      padding: 8px;
      width: 800px;
      position: relative;
      display: flex;
      flex-direction: column;
      gap: 4px;
      background: linear-gradient(130deg, 
        rgba(77, 255, 255, 0.7), 
        rgba(188, 19, 254, 0.7), 
        rgba(255, 54, 171, 0.7)
      ) !important;
      box-shadow: 
        inset 0 0 15px rgba(77, 255, 255, 0.3),
        0 0 15px rgba(77, 255, 255, 0.3);
    }

    .glow-border {
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      border-radius: 10px;
      z-index: -1;
      opacity: 0.4;
      background: linear-gradient(45deg, 
        rgba(77, 255, 255, 0.3), 
        rgba(188, 19, 254, 0.3), 
        rgba(255, 54, 171, 0.3)
      ) !important;
      box-shadow: 
        0 0 20px rgba(77, 255, 255, 0.4);
      animation: borderGlow 3s linear infinite;
      pointer-events: none;
    }

    .progress-bar {
      width: 100%;
      height: 25px;
      border-radius: 12px;
      overflow: hidden;
      position: relative;
      border: 1px solid var(--neon-blue);
      background: rgba(0, 0, 0, 0.5) !important;
    }

    .progress-fill {
      height: 100%;
      width: 0;
      position: relative;
      transition: width 0.5s ease-in-out;
      background: linear-gradient(90deg, 
        rgba(77, 255, 255, 0.7), 
        rgba(188, 19, 254, 0.7)
      ) !important;
      box-shadow: 
        inset 0 0 10px rgba(77, 255, 255, 0.5),
        0 0 15px rgba(77, 255, 255, 0.5);
    }

    .progress-fill::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      opacity: 0.2;
      background: linear-gradient(
        45deg,
        rgba(255, 255, 255, 0.1) 25%,
        transparent 25%,
        transparent 50%,
        rgba(255, 255, 255, 0.1) 50%,
        rgba(255, 255, 255, 0.1) 75%,
        transparent 75%,
        transparent
      );
      background-size: 20px 20px;
      animation: progressStripes 1s linear infinite;
    }

    .sub-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      text-shadow: 0 0 10px var(--text-shadow);
      font-size: 0.9em;
      line-height: 1;
      background: rgba(0, 0, 0, 0.7) !important;
      padding: 5px 10px;
      border-radius: 8px;
      border: 1px solid rgba(77, 255, 255, 0.3);
    }

    h2 {
      font-size: 1em;
      margin: 0;
      padding: 0;
    }

    #added_subs {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 1.2em;
      color: #fff;
      text-shadow: 0 0 10px var(--neon-pink);
      z-index: 10;
      display: none;
    }

    /* Animations */
    @keyframes borderGlow {
      0%, 100% { opacity: 0.3; }
      50% { opacity: 0.1; }
    }

    @keyframes progressStripes {
      0% { background-position: 0 0; }
      100% { background-position: 20px 0; }
    }

    @keyframes pop-up {
      0% { transform: translate(-50%, -100%) scale(0); opacity: 0; }
      50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }
      100% { transform: translate(-50%, -50%) scale(1); opacity: 0; }
    }

    .milestone-count {
      position: relative;
      display: inline-block;
      text-shadow: 
        0 0 5px var(--neon-blue),
        0 0 10px var(--neon-purple);
    }
  </style>
</head>
<body>
  <div class="sub-tracker-container">
    <div class="progress-bar">
      <span id="added_subs"></span>
      <div class="progress-fill" id="progressFill"></div>
    </div>
    <div class="sub-info">
      <h2>Next Spin: <span id="subsToNextGoal">0</span> Subs or <span id="bitsToNextGoal">0</span> Bits or $<span id="donationsToNextGoal">0</span></h2>
      <h2>Pending/Completed: <span id="milestoneCount" class="milestone-count">0</span>/<span id="completedSpins" class="milestone-count">0</span></h2>
    </div>
  </div>
  <div class='data' style='display:none;'>
    <h2>Total Donos: <span id="totalSubs">0</span> Subs | <span id="totalBits">0</span> Bits | $<span id="totalDonations">0</span></h2>
  </div>
  <audio id="thresholdSound" src="https://cdn.leantube.org/alert10.mp3?v=1736640018347"></audio>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const thresholdSound = document.getElementById('thresholdSound');
    const newSubElement = document.getElementById('added_subs');
    const bitsToAddElement = document.getElementById('totalBits');
    const donationsToAddElement = document.getElementById('totalDonations');
    const totalSubsElement = document.getElementById('totalSubs');
    const subsToNextGoalElement = document.getElementById('subsToNextGoal');
    const bitsToNextGoalElement = document.getElementById('bitsToNextGoal');
    const donationsToNextGoalElement = document.getElementById('donationsToNextGoal');
    const milestoneCountElement = document.getElementById('milestoneCount');
    const progressFillElement = document.getElementById('progressFill');

    const MILESTONE_VALUE = 50; // $50 worth of donations for a spin
    const SUB_VALUE = 5; // $5 per sub
    const BITS_VALUE = 0.01; // $0.01 per bit
    
    function calculateTotalValue(subs, bits, donations) {
      // Convert everything to dollar value
      const subValue = subs * SUB_VALUE;
      const bitsValue = bits * BITS_VALUE;
      const totalValue = subValue + bitsValue + donations;
      return totalValue;
    }
    
    function updateSubTracker(totalSubs, totalBits, totalDonations, subsToAdd, bitsToAdd, donationsToAdd, completedSpins) {
      // Calculate total value and progress
      const totalValue = calculateTotalValue(totalSubs, totalBits, totalDonations);
      const currentProgress = totalValue % MILESTONE_VALUE;
      const progressPercentage = (currentProgress / MILESTONE_VALUE) * 100;
      const completedSpinsElement = document.getElementById('completedSpins');

      // Calculate remaining amounts needed for next spin
      const remainingValue = MILESTONE_VALUE - currentProgress;
      const subsNeeded = Math.ceil(remainingValue / SUB_VALUE);
      const bitsNeeded = Math.ceil(remainingValue / BITS_VALUE);
      const donationsNeeded = remainingValue.toFixed(2);

      // Update display elements
      totalSubsElement.innerText = totalSubs;
      subsToNextGoalElement.innerText = subsNeeded;
      bitsToNextGoalElement.innerText = bitsNeeded;
      donationsToNextGoalElement.innerText = donationsNeeded;
      completedSpinsElement.innerText = completedSpins;
      completedSpinsElement.setAttribute('data-text', completedSpins);
      // Calculate total spins (milestones)
      const milestoneCount = Math.floor(totalValue / MILESTONE_VALUE);
      milestoneCountElement.innerText = milestoneCount - completedSpins;
      milestoneCountElement.setAttribute('data-text', milestoneCount);
      
      bitsToAddElement.innerText = totalBits;
      donationsToAddElement.innerText = totalDonations;

      // Update progress bar
      progressFillElement.style.width = `${progressPercentage}%`;
      
      // Handle new donation animations
      let animationText = '';
      if (subsToAdd > 0) animationText = `+${subsToAdd} subs!`;
      else if (bitsToAdd > 0) animationText = `+${bitsToAdd} bits!`;
      else if (donationsToAdd > 0) animationText = `+$${donationsToAdd}!`;
      
      if (animationText) {
        newSubElement.style.display = 'block';
        newSubElement.style.animation = 'none';
        newSubElement.style.animation = 'pop-up 1.5s cubic-bezier(0.16, 1, 0.3, 1)';
        newSubElement.innerHTML = `<span style="color: var(--neon-pink)">${animationText}</span>`;
        setTimeout(() => {
          newSubElement.style.display = 'none';
        }, 1500);
      }
    }

    socket.on('updateSubTracker', data => {
      console.log('updateSubTracker received:', data);
      updateSubTracker(data.current_subs, data.current_bits, data.current_donations, data.subsToAdd, 0, 0, data.completed_spins);
    });
    socket.on('updateSpinTracker', data => {
      console.log('updateSpinTracker received:', data);
      updateSubTracker(
        data.current_subs, 
        data.current_bits, 
        data.current_donations, 
        0, 0, 0, 
        data.completed_spins
      );
    });
    socket.on('updateBitsTracker', data => {
      console.log('updateBitsTracker received:', data);
      updateSubTracker(data.current_subs, data.current_bits, data.current_donations, 0, data.bitsToAdd, 0, data.completed_spins);
    });

    socket.on('updateDonationsTracker', data => {
      console.log('updateDonationsTracker received:', data);
      updateSubTracker(data.current_subs, data.current_bits, data.current_donations, 0, 0, data.donationToAdd, data.completed_spins);
    });

    socket.on('subTrackerThreshold', new_subs => {
      console.log('subTrackerThreshold received:', new_subs);

      // Function to play sound with delay
      const playSound = (delay) => {
        setTimeout(() => {
          // Clone the audio element for overlapping sounds
          const soundClone = thresholdSound.cloneNode();
          soundClone.play();
        }, delay);
      };

      // Play sound three times with 500ms delay between each
      playSound(0);    // First play immediately
      playSound(1050);  // Second play after 500ms
      playSound(2100); // Third play after 1000ms
    });

    // Initialize with the current sub count, bits count, and donations count from the server
    const initialSubCount = <%= current_subcount %>;
    const initialBitsCount = <%= current_bits %>;
    const initialDonationsCount = <%= current_donations %>;
    const initialCompletedSpins = <%= completed_spins %>;
    updateSubTracker(
      initialSubCount, 
      initialBitsCount, 
      initialDonationsCount, 
      0, 0, 0,
      initialCompletedSpins
    );
  </script>
</body>
</html>