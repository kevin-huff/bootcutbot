<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Existing Head Content -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootcut Game Interface</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel+Decorative:wght@400;700&family=Inter:wght@400;600;700&family=UnifrakturCook:wght@700&display=swap" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/@babel/standalone@7/babel.min.js"></script>
    <!-- JavaScript code remains unchanged -->
    <script type="text/javascript">
    const initialBreakaways = <%- JSON.stringify(breakaways || []) %>;
    window.breakawayDataMap = new Map(initialBreakaways.map(item => [item.id, item]));
    $(document).ready(function() {
        updateTurn('<%= current_turn %>');

        var CountDown = (function ($) {
        // Length ms 
        var TimeOut = 10000;
        // Interval ms
        var TimeGap = 1000;
        
        var CurrentTime = ( new Date() ).getTime();
        var EndTime = ( new Date() ).getTime() + TimeOut;
        
        var GuiTimer = $('#timer');
        var GuiPause = $('#pause');
        
        var Running = false;
        
        var UpdateTimer = function() {
        // Run till timeout
        if( CurrentTime + TimeGap < EndTime && Running ) {
            setTimeout( UpdateTimer, TimeGap );
        }
        // Countdown if running
        if( Running ) {
            CurrentTime += TimeGap;
            if( CurrentTime >= EndTime ) {
                Running = false;
                $('#timer_num').text('00:00');
                $('#timer_display').css('color','#DD2222');
                $('#current_player').css('color','#DD2222');
                $('#timer_display').addClass('blink_me');
                $('#current_player').addClass('blink_me');
            } else {
                // Update Gui
                var Time = new Date();
                Time.setTime( EndTime - CurrentTime );
                var Minutes = Time.getMinutes();
                var Seconds = Time.getSeconds();
                $('#timer_num').text( 
                String(Minutes).padStart(2, '0') + ':' + 
                String(Seconds).padStart(2, '0') );
            }
        }
                
        };
        
        var Pause = function() {
            Running = false;
        };
        
        var Resume = function() {
            Running = true;
            UpdateTimer();
        };
        
        var Start = function( Timeout ) {
        $('#timer_display').css('color','#F3C623');
        $('#current_player').css('color','#F3C623');
        $('#timer_display').removeClass('blink_me');
        $('#current_player').removeClass('blink_me');
        TimeOut = Timeout;
        CurrentTime = ( new Date() ).getTime();
        EndTime = ( new Date() ).getTime() + TimeOut;
        UpdateTimer();
        };

        return {
            Pause: Pause,
            Resume: Resume,
            Start: Start
        };
  })(jQuery);

    let thisCountDown = CountDown
    let socket = io();
    socket.on("connect", () => {
        console.log('socket connected: ',socket.connected); // true
    });
    socket.on('board_update', function(splot_data){
        console.log('board_update')
        updateBoard(splot_data);
    });
    socket.on('clear_board', function(msg){
        console.log('clear_board')
        clearBoard();
    });
    socket.on('new_turn', function(msg){
        console.log('new_turn')
        updateTurn(msg);
    });
    socket.on('timer_server', function(msg){
        console.log('timer_admin:', msg)
        $('#timer_num').text(msg.timer_display);
        if(msg.action == 'start'){
          thisCountDown.Start(msg.timer_value);
        }
        if(msg.action == 'pause'){
          thisCountDown.Pause();
        }
        if(msg.action == 'resume'){
          thisCountDown.Resume();
        }
    }); 
    socket.on('ba_update', function(ba_data){
        console.log('ba_update')
        updateBreakaways(ba_data);
    });
    socket.on('dice_rolled', function(data){
    var this_uuid = generateUUID();          
    // Create HTML structure
    var roll_animation = $('<div>')
        .attr('class', 'dice-roll-popup').attr('id', 'roll-' + this_uuid)
        .append($('<div>').attr('class', 'inner-lcars')
            .append($('<div>').attr('class', 'die-name')
                .append($('<p>').html(data.dice_name)))
            .append($('<div>').attr('class', 'roll-value')
                .append($('<p>').attr('class', 'roll').html(data.roll_value)))
            .append($('<div>').attr('class', 'die-type')
                .append($('<p>').html(data.dice_type))));
    // add structure to body
    $('body').append(roll_animation);
    // randomly select a jquery ui effect
    var effects = ['slide', 'clip', 'fade', 'blind', 'explode', 'puff', 'shake', 'fold'];
    var effect = effects[Math.floor(Math.random()*effects.length)];
    // apply effect when animation is shown
    $('#roll-' + this_uuid).show(500);
    // remove animation after 2 seconds
    setTimeout(function(){
        $('#roll-' + this_uuid).hide( 500, function(){
            $('#roll-' + this_uuid).remove();
        });
    }, 5000);
    //If its' a d8 then flash the border of the spot number and entry
    if(data.dice_type == 'D8'){
        flashBorder(data.roll_value);
        if(data.roll_value == 6){
            var audio = document.getElementById('hellfire');
            audio.play();
        }
    }    
});
    function updateTurn(text) {
      $('#timer_display').removeClass('blink_me');
      $('#current_player').removeClass('blink_me');
      document.getElementById("current_player").textContent = text;
    }
    function getSplotData(splot_id){
      let current_splot_dots = parseInt(document.getElementById("splot_dot_" + splot_id).innerHTML);
      let current_splot_entry = document.getElementById("splotEntry_" + splot_id).innerHTML.trim();
      let splot_data = {
          id: splot_id,
          entry: current_splot_entry,
          splot_dot: current_splot_dots
      }
      console.log('getSplotData',splot_data)
      return splot_data;
    }
    function updateBoard(splot_data){    
        var innerHTML = 
            '<h2>' +
                '<span class="spot-number" id="splot_number_' + splot_data.id + '">' +
                splot_data.id +
                '</span>' +
                '<span class="splotEntry" id="splotEntry_' + splot_data.id + '">' +
                splot_data.entry +
                '</span>' +
            '</h2>' +
            '<p class="use-count" id="splot_count_' + splot_data.id + '">' +
                'Uses: ' + splot_data.splot_dot +
            '</p>';

        var this_splot = document.getElementById('splot_' + splot_data.id);

        if (this_splot) {
            this_splot.classList.add('tilt-card');
            $('#splot_' + splot_data.id).fadeOut("slow", function() {
                this_splot.innerHTML = innerHTML;
                this_splot.style.setProperty('--tiltX', '0deg');
                this_splot.style.setProperty('--tiltY', '0deg');
                $('#splot_' + splot_data.id).fadeIn();
                attachTiltHandlers(this_splot);
            }); 

        } else {
            var div = document.createElement("div");
            div.className = "spot tilt-card item";
            div.id = 'splot_' + splot_data.id;
            div.innerHTML = innerHTML;
            document.getElementById("board").appendChild(div);
            $('#splot_' + splot_data.id).fadeIn("slow", function(){
                attachTiltHandlers(div);
            });
        }
    }
    function clearBoard(){
      $('#board').fadeOut();
      document.getElementById("board").innerHTML = "";
      $('#board').fadeIn();
    }
    // Add the generateUUID function
    function generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
        });
    }
    function updateBreakaways(ba_data){
        if (!window.breakawayDataMap) {
            window.breakawayDataMap = new Map();
        }
        window.breakawayDataMap.set(ba_data.id, {
            id: ba_data.id,
            name: ba_data.name,
            ba_dots: ba_data.ba_dots
        });
        if (typeof window.renderBreakawayRibbon === 'function') {
            window.renderBreakawayRibbon(Array.from(window.breakawayDataMap.values()));
        }
    }
    // Function to apply the hover effect to a spot div by id
    function flashBorder(roll_value){
        //remove any other spot highlighted
        for (let i = 1; i < 9; i++) {
            let spot = document.getElementById('splot_' + i);
            if (!spot) { continue; }
            spot.style.border = '1px solid rgba(243, 198, 35, 0.24)';
            spot.style.removeProperty('--glowX');
            spot.style.removeProperty('--glowY');
        }
        let spot_id = roll_value;
        let spot = document.getElementById('splot_' + spot_id);
        if (!spot) { return; }
        let mouseoverEvent = new Event('mouseover');
        spot.dispatchEvent(mouseoverEvent);
        spot.style.border = '2px solid #FF6A00';
        spot.style.setProperty('--glowX', '50%');
        spot.style.setProperty('--glowY', '35%');
    }

    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    function attachTiltHandlers(target){
        if (prefersReducedMotion) { return; }
        let cards = [];
        if (!target) {
            cards = document.querySelectorAll('.tilt-card');
        } else if (target instanceof Element && target.classList.contains('tilt-card')) {
            cards = [target];
        } else if (target instanceof Element) {
            cards = target.querySelectorAll('.tilt-card');
        }
        cards.forEach(card => {
            if (card.dataset.tiltBound) { return; }
            card.dataset.tiltBound = 'true';
            card.style.setProperty('--tiltX', '0deg');
            card.style.setProperty('--tiltY', '0deg');
            card.style.setProperty('--glowX', '50%');
            card.style.setProperty('--glowY', '50%');
            card.style.setProperty('--tiltElev', '0px');
            card.addEventListener('mousemove', handleTiltMove);
            card.addEventListener('mouseleave', resetTiltMove);
            card.addEventListener('touchstart', () => card.classList.add('is-touching'), { passive: true });
            card.addEventListener('touchmove', handleTiltMove, { passive: true });
            card.addEventListener('touchend', resetTiltMove, { passive: true });
        });
    }

    function handleTiltMove(event){
        const card = event.currentTarget;
        const rect = card.getBoundingClientRect();
        const point = event.touches ? event.touches[0] : event;
        const x = point.clientX - rect.left;
        const y = point.clientY - rect.top;
        const percentX = (x / rect.width) - 0.5;
        const percentY = (y / rect.height) - 0.5;
        const maxTilt = 10;
        const tiltY = (percentX * maxTilt * -1).toFixed(2);
        const tiltX = (percentY * maxTilt).toFixed(2);
        card.style.setProperty('--tiltX', tiltX + 'deg');
        card.style.setProperty('--tiltY', tiltY + 'deg');
        card.style.setProperty('--glowX', (percentX * 60 + 50).toFixed(2) + '%');
        card.style.setProperty('--glowY', (percentY * 60 + 50).toFixed(2) + '%');
    }

    function resetTiltMove(event){
        const card = event.currentTarget;
        card.style.setProperty('--tiltX', '0deg');
        card.style.setProperty('--tiltY', '0deg');
        card.style.setProperty('--glowX', '50%');
        card.style.setProperty('--glowY', '50%');
        card.classList.remove('is-touching');
    }

    attachTiltHandlers();
});

    </script>
    <script type="text/babel">
    const BreakawayLabel = ({ children }) => (
        <span className="breakaway-label">{children}</span>
    );

    const BreakawayCard = ({ item }) => (
        <div className="breakaway-col" id={`breakaway_${item.id}`}>
            <div className="breakaway-content">
                <div className="breakaway-header">
                    <BreakawayLabel>Breakaways</BreakawayLabel>
                    <h3>
                        <span id={`breakawayName_${item.id}`}>{item.name}</span>
                    </h3>
                </div>
                <div className="breakaway-counter">
                    <div className="counter-circle">
                        <strong id={`ba_dot_${item.id}`}>{item.ba_dots}</strong>
                    </div>
                </div>
            </div>
        </div>
    );

    const BreakawayEmpty = () => (
        <div className="breakaway-empty" role="status">No breakaways yet</div>
    );

    const BreakawayRibbon = ({ items }) => {
        if (!items || items.length === 0) {
            return <BreakawayEmpty />;
        }
        return (
            <React.Fragment>
                {items.map(item => (
                    <BreakawayCard item={item} key={item.id} />
                ))}
            </React.Fragment>
        );
    };

    const breakawayRootElement = document.getElementById('breakaway-react-root');
    let breakawayRoot = null;

    function ensureBreakawayRoot() {
        if (!breakawayRoot && breakawayRootElement) {
            breakawayRoot = ReactDOM.createRoot(breakawayRootElement);
        }
        return breakawayRoot;
    }

    function renderBreakawayRibbon(items) {
        const root = ensureBreakawayRoot();
        if (!root) { return; }
        const safeItems = Array.isArray(items) ? items.slice() : [];
        root.render(<BreakawayRibbon items={safeItems} />);
    }

    window.renderBreakawayRibbon = renderBreakawayRibbon;

    const initialRibbonItems = window.breakawayDataMap ? Array.from(window.breakawayDataMap.values()) : [];
    renderBreakawayRibbon(initialRibbonItems);
    </script>
    <style>
        :root {
            --base-coal: #0C0B0B;
            --basalt: #131217;
            --char: #1B1A20;
            --ember: #DD2222;
            --furnace: #FF6A00;
            --sulfur: #F3C623;
            --ash: #A7A7A7;
            --bone: #F2E9E4;
            --blood: #8A1111;
            --verdigris: #00D7A1;
            --steel: rgba(180, 170, 150, 0.35);
            --shadow-strong: rgba(0, 0, 0, 0.92);
            --shadow-soft: rgba(0, 0, 0, 0.45);
            --gutter: 24px;
            --font-display: 'Cinzel Decorative', 'UnifrakturCook', serif;
            --font-body: 'Inter', 'Rubik', sans-serif;
        }

        *, *::before, *::after {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(180deg, var(--base-coal) 0%, var(--basalt) 55%, var(--char) 100%);
            color: var(--bone);
            font-family: var(--font-body);
            letter-spacing: 0.02em;
            overflow: hidden;
        }

        body::before {
            content: '';
            position: fixed;
            inset: 0;
            pointer-events: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='140' height='140'%3E%3Cfilter id='n'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23n)' opacity='0.12'/%3E%3C/svg%3E");
            mix-blend-mode: screen;
            opacity: 0.15;
            z-index: 0;
        }

        audio#hellfire {
            display: none;
        }

        .container {
            position: relative;
            z-index: 1;
            width: 760px;
            height: 1080px;
            padding: 32px 32px;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            gap: 18px;
            isolation: isolate;
        }

        .container::before {
            content: '';
            position: absolute;
            inset: 24px;
            border-radius: 32px;
            background: radial-gradient(120% 140% at 50% 0%, rgba(255, 106, 0, 0.22) 0%, rgba(210, 34, 34, 0.08) 35%, transparent 70%);
            opacity: 0.35;
            pointer-events: none;
            z-index: -1;
        }

        header.brand-lockup {
            position: relative;
            padding: 12px 20px 10px;
            text-align: center;
            background: radial-gradient(120% 140% at 50% 0%, rgba(138, 17, 17, 0.2) 0%, rgba(12, 11, 11, 0.92) 60%);
            border-radius: 16px;
            border: 1px solid rgba(243, 198, 35, 0.2);
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.02), 0 18px 32px -26px rgba(0, 0, 0, 0.8);
            text-transform: uppercase;
        }

        header.brand-lockup::before {
            content: '';
            position: absolute;
            inset: 6px;
            border-radius: 12px;
            border: 1px solid rgba(255, 106, 0, 0.18);
            pointer-events: none;
            opacity: 0.45;
        }

        header.brand-lockup h1 {
            margin: 0;
            font-family: var(--font-display);
            font-size: 2.2rem;
            letter-spacing: 0.18em;
            text-shadow: 0 0 16px rgba(255, 106, 0, 0.35);
        }

        header.brand-lockup .tagline {
            display: block;
            margin-top: 4px;
            font-size: 0.65rem;
            letter-spacing: 0.32em;
            color: rgba(167, 167, 167, 0.85);
        }

        .top-bar {
            position: relative;
            display: grid;
            grid-template-columns: minmax(0, 1.05fr) auto minmax(0, 1.65fr);
            align-items: stretch;
            gap: 18px;
            padding: 12px 20px;
            border-radius: 14px;
            border: 1px solid rgba(243, 198, 35, 0.16);
            background: linear-gradient(180deg, rgba(19, 18, 23, 0.9), rgba(12, 11, 11, 0.88));
            box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.04), 0 14px 26px -22px rgba(0, 0, 0, 0.85);
        }

        .status-cluster {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 6px;
            text-transform: uppercase;
            letter-spacing: 0.08em;
            color: var(--ash);
        }

        .status-label {
            font-size: 0.55rem;
            letter-spacing: 0.28em;
            text-transform: uppercase;
            color: rgba(243, 198, 35, 0.75);
            opacity: 0.8;
        }

        .timer-cluster {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .status-line {
            margin: 0;
            font-size: 0.75rem;
            color: var(--bone);
            letter-spacing: 0.18em;
        }

        .timer-shell {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #timer_display {
            position: relative;
            width: 78px;
            height: 78px;
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 2px;
            color: var(--bone);
            background: radial-gradient(circle at 50% 30%, rgba(255, 106, 0, 0.28), rgba(12, 11, 11, 0.92));
            border: 1px solid rgba(243, 198, 35, 0.18);
            box-shadow: inset 0 0 12px rgba(0, 0, 0, 0.85), 0 0 32px rgba(255, 106, 0, 0.16);
            transition: box-shadow 200ms ease, border-color 200ms ease, color 200ms ease;
        }

        #timer_display::before {
            content: '';
            position: absolute;
            inset: -10px;
            border-radius: 50%;
            border: 1px solid rgba(255, 106, 0, 0.26);
            opacity: 0.35;
            filter: blur(0.5px);
        }

        #timer_display::after {
            content: '';
            position: absolute;
            inset: -16px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(255, 106, 0, 0.18) 0%, transparent 60%);
            opacity: 0.85;
            pointer-events: none;
            animation: timer-pulse 4s ease-in-out infinite;
        }

        #timer_display .timer-label {
            font-size: 0.52rem;
            font-weight: 600;
            letter-spacing: 0.4em;
            opacity: 0.7;
        }

        #timer_num {
            font-family: var(--font-display);
            font-size: 1.1rem;
            letter-spacing: 0.1em;
        }

        .board-frame {
            position: relative;
            flex: 0 0 720px;
            padding: 32px;
            border-radius: 28px;
            background: linear-gradient(180deg, rgba(19, 18, 23, 0.88), rgba(12, 11, 11, 0.95));
            border: 1px solid rgba(138, 17, 17, 0.28);
            box-shadow: inset 0 0 60px rgba(0, 0, 0, 0.85), 0 32px 60px -48px rgba(0, 0, 0, 0.9);
            overflow: hidden;
            display: flex;
            align-items: stretch;
        }

        .board-frame::before {
            content: '';
            position: absolute;
            inset: -20% -30% -60% -30%;
            background: radial-gradient(80% 100% at 50% 100%, rgba(255, 106, 0, 0.24), transparent 70%);
            opacity: 0.6;
            pointer-events: none;
        }

        .board-frame::after {
            content: '';
            position: absolute;
            inset: 0;
            background: linear-gradient(0deg, rgba(210, 34, 34, 0.18), transparent 60%);
            opacity: 0.35;
            pointer-events: none;
        }

        .prism-bg {
            position: absolute;
            inset: -35%;
            pointer-events: none;
            z-index: 1;
            background: radial-gradient(circle at 20% 20%, rgba(255, 106, 0, 0.15), transparent 55%),
                        radial-gradient(circle at 80% 25%, rgba(243, 198, 35, 0.18), transparent 50%),
                        radial-gradient(circle at 50% 80%, rgba(138, 17, 17, 0.22), transparent 55%),
                        radial-gradient(circle at 10% 85%, rgba(0, 215, 161, 0.12), transparent 45%);
            filter: blur(50px);
            opacity: 0.7;
            animation: prism-pan 18s ease-in-out infinite alternate;
            mix-blend-mode: screen;
        }

        .prism-bg::before,
        .prism-bg::after {
            content: '';
            position: absolute;
            inset: -25%;
            background: conic-gradient(from 90deg at 50% 50%, rgba(255, 106, 0, 0.22), rgba(243, 198, 35, 0.12), rgba(138, 17, 17, 0.16), rgba(0, 215, 161, 0.14), rgba(255, 106, 0, 0.22));
            opacity: 0.5;
            filter: blur(90px);
            mix-blend-mode: screen;
        }

        .prism-bg::before {
            animation: prism-rotate 28s linear infinite;
        }

        .prism-bg::after {
            animation: prism-rotate 34s linear infinite reverse;
            opacity: 0.35;
        }

        .grid {
            position: relative;
            z-index: 2;
            display: grid;
            grid-template-columns: repeat(2, minmax(0, 1fr));
            grid-template-rows: repeat(4, minmax(0, 1fr));
            gap: var(--gutter);
            width: 100%;
        }

        .spot {
            position: relative;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            gap: 16px;
            padding: 24px 24px 20px;
            border-radius: 18px;
            background: linear-gradient(180deg, rgba(29, 27, 32, 0.94), rgba(12, 11, 11, 0.9));
            border: 1px solid rgba(243, 198, 35, 0.12);
            box-shadow: inset 0 0 18px rgba(0, 0, 0, 0.85), 0 16px 32px -28px rgba(0, 0, 0, 0.8);
            color: var(--bone);
            overflow: hidden;
            transition: transform 220ms ease, box-shadow 220ms ease, border-color 220ms ease, filter 220ms ease;
        }

        .spot::before {
            content: '';
            position: absolute;
            inset: -15% -10%;
            background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='240' height='240'%3E%3Cpath d='M62 16c22 12 12 30-6 40s-42 20-38 42 32 28 44 46 6 42 32 48 40-18 66-24 58 16 72-6 0-52-16-74-44-30-64-44-12-28-32-40-48-8-58 12z' fill='rgba(255,106,0,0.08)'/%3E%3C/svg%3E") center/cover no-repeat;
            opacity: 0.25;
            mix-blend-mode: screen;
            pointer-events: none;
        }

        .spot::after {
            content: '';
            position: absolute;
            inset: 0;
            border-radius: inherit;
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.02);
            opacity: 0.6;
            pointer-events: none;
        }

        .spot:hover,
        .spot:focus-within {
            transform: translateY(-4px);
            border-color: rgba(255, 106, 0, 0.45);
            box-shadow: inset 0 0 24px rgba(0, 0, 0, 0.75), 0 24px 45px -34px rgba(255, 106, 0, 0.35);
        }

        .spot h2 {
            position: relative;
            display: flex;
            align-items: center;
            gap: 18px;
            margin: 0;
            font-size: 1.05rem;
            letter-spacing: 0.08em;
            text-transform: uppercase;
            font-weight: 600;
        }

        .spot-number {
            position: relative;
            width: 58px;
            height: 58px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-family: var(--font-display);
            font-size: 1.4rem;
            color: var(--bone);
            background: radial-gradient(circle at 35% 30%, rgba(243, 198, 35, 0.28), rgba(138, 17, 17, 0.9));
            border: 2px solid rgba(243, 198, 35, 0.3);
            box-shadow: inset 0 0 12px rgba(0, 0, 0, 0.7), 0 0 12px rgba(210, 34, 34, 0.38);
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.65);
        }

        .spot-number::after {
            content: '';
            position: absolute;
            inset: 4px;
            border-radius: 50%;
            border: 1px dashed rgba(243, 198, 35, 0.28);
            opacity: 0.6;
        }

        .splotEntry {
            display: block;
            font-size: 1rem;
            font-weight: 600;
            color: var(--bone);
            text-shadow: 0 0 12px rgba(0, 0, 0, 0.55);
        }

        .use-count {
            position: relative;
            align-self: flex-end;
            margin-top: auto;
            padding: 8px 12px;
            font-size: 0.78rem;
            letter-spacing: 0.15em;
            text-transform: uppercase;
            color: rgba(243, 198, 35, 0.85);
            background: linear-gradient(90deg, rgba(138, 17, 17, 0.65), rgba(12, 11, 11, 0.9));
            border: 1px solid rgba(243, 198, 35, 0.35);
            border-radius: 8px;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.65);
        }

        .use-count::before {
            content: '';
            position: absolute;
            inset: 2px;
            border-radius: 6px;
            border: 1px dashed rgba(243, 198, 35, 0.4);
            opacity: 0.35;
            transform: skew(-6deg);
        }

        .spot.blink_me,
        #timer_display.blink_me {
            animation: ember-blink 0.66s ease-in-out infinite alternate;
        }

        .spot.is-selected,
        .spot[data-state="selected"] {
            border-color: rgba(255, 106, 0, 0.6);
            box-shadow: inset 0 0 36px rgba(255, 106, 0, 0.22), 0 0 42px -16px rgba(255, 106, 0, 0.45);
        }

        .spot.is-locked,
        .spot[data-state="locked"] {
            filter: grayscale(0.25) brightness(0.8);
            border-color: rgba(167, 167, 167, 0.3);
        }

        .spot.is-spent,
        .spot[data-state="spent"] {
            background: linear-gradient(180deg, rgba(60, 55, 60, 0.95), rgba(20, 18, 25, 0.88));
            border-color: rgba(167, 167, 167, 0.2);
        }

        .spot.is-hellfire,
        .spot[data-state="hellfire"] {
            background: linear-gradient(180deg, rgba(0, 215, 161, 0.16), rgba(12, 11, 11, 0.95));
            border-color: rgba(0, 215, 161, 0.45);
            box-shadow: inset 0 0 26px rgba(0, 215, 161, 0.25), 0 0 32px rgba(0, 215, 161, 0.25);
        }

        .spot.is-hellfire .spot-number,
        .spot[data-state="hellfire"] .spot-number {
            background: radial-gradient(circle at 40% 40%, rgba(0, 215, 161, 0.35), rgba(12, 11, 11, 0.9));
            border-color: rgba(0, 215, 161, 0.4);
            box-shadow: inset 0 0 12px rgba(0, 0, 0, 0.6), 0 0 16px rgba(0, 215, 161, 0.38);
        }

        .spot[data-motion="static"]::before {
            display: none;
        }

        .breakaway-ribbon {
            position: relative;
            display: grid;
            grid-auto-flow: column;
            grid-auto-columns: minmax(150px, 1fr);
            gap: 12px;
            align-items: stretch;
            padding: 4px 0;
            overflow-x: auto;
            overflow-y: hidden;
            scrollbar-width: thin;
        }

        .breakaway-ribbon::-webkit-scrollbar {
            height: 6px;
        }

        .breakaway-ribbon::-webkit-scrollbar-track {
            background: rgba(12, 11, 11, 0.4);
        }

        .breakaway-ribbon::-webkit-scrollbar-thumb {
            background: rgba(243, 198, 35, 0.35);
            border-radius: 999px;
        }

        .breakaway-ribbon::before,
        .breakaway-ribbon::after {
            content: '';
            position: absolute;
            top: 0;
            bottom: 0;
            width: 32px;
            pointer-events: none;
            z-index: 2;
        }

        .breakaway-ribbon::before {
            left: 0;
            background: linear-gradient(90deg, rgba(12, 11, 11, 0.95), transparent);
        }

        .breakaway-ribbon::after {
            right: 0;
            background: linear-gradient(270deg, rgba(12, 11, 11, 0.95), transparent);
        }

        .breakaway-empty {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 14px 16px;
            border-radius: 16px;
            border: 1px solid rgba(243, 198, 35, 0.22);
            background: linear-gradient(180deg, rgba(25, 24, 30, 0.85), rgba(12, 11, 11, 0.88));
            font-size: 0.75rem;
            letter-spacing: 0.2em;
            text-transform: uppercase;
            color: rgba(242, 233, 228, 0.68);
        }

        .breakaway-col {
            position: relative;
            padding: 14px 16px;
            border-radius: 16px;
            background: linear-gradient(180deg, rgba(25, 24, 30, 0.95), rgba(12, 11, 11, 0.9));
            border: 1px solid rgba(210, 34, 34, 0.35);
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.02), 0 12px 24px -18px rgba(0, 0, 0, 0.85);
            overflow: hidden;
            min-width: 150px;
        }

        .breakaway-col:hover,
        .breakaway-col:focus-within {
            border-color: rgba(243, 198, 35, 0.45);
            box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.06), 0 18px 32px -20px rgba(255, 106, 0, 0.45);
        }

        .breakaway-col::before {
            content: '';
            position: absolute;
            inset: 0;
            background: radial-gradient(120% 160% at 0% 0%, rgba(255, 106, 0, 0.22), transparent 65%);
            opacity: 0.45;
            pointer-events: none;
        }

        .breakaway-col::after {
            content: '';
            position: absolute;
            inset: 2px;
            border-radius: 14px;
            border: 1px solid rgba(243, 198, 35, 0.18);
            opacity: 0.25;
            pointer-events: none;
        }

        .breakaway-content {
            position: relative;
            display: grid;
            grid-template-columns: minmax(0, 1fr) auto;
            gap: 12px;
            align-items: center;
            z-index: 1;
        }

        .breakaway-header {
            display: grid;
            gap: 2px;
        }

        .breakaway-label {
            font-size: 0.55rem;
            letter-spacing: 0.26em;
            text-transform: uppercase;
            color: rgba(243, 198, 35, 0.72);
            opacity: 0.9;
        }

        .breakaway-header h3 {
            margin: 0;
            font-family: var(--font-display);
            font-size: 0.95rem;
            letter-spacing: 0.14em;
            text-transform: uppercase;
            color: var(--bone);
            text-shadow: 0 0 10px rgba(0, 0, 0, 0.6);
        }

        .breakaway-counter {
            display: grid;
            gap: 4px;
            justify-items: center;
        }

        .counter-circle {
            width: 46px;
            height: 46px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(243, 198, 35, 0.86), rgba(210, 34, 34, 0.32));
            border: 2px solid rgba(243, 198, 35, 0.35);
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: var(--font-display);
            font-size: 1.18rem;
            color: var(--char);
            text-shadow: 0 1px 2px rgba(255, 255, 255, 0.18);
            box-shadow: 0 0 14px rgba(243, 198, 35, 0.32);
        }

        .dice-roll-popup {
            position: fixed;
            width: 220px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 9999;
            background: linear-gradient(180deg, rgba(19, 18, 23, 0.94), rgba(12, 11, 11, 0.92));
            color: var(--bone);
            border: 1px solid rgba(243, 198, 35, 0.28);
            box-shadow: 0 20px 60px -44px rgba(0, 0, 0, 0.9), 0 0 32px rgba(255, 106, 0, 0.22);
            border-radius: 16px;
            padding: 24px 20px;
            backdrop-filter: blur(4px);
            transition: transform 220ms ease, box-shadow 220ms ease;
        }

        .dice-roll-popup:hover {
            transform: translate(-50%, -50%) scale(1.03);
            box-shadow: 0 18px 50px -30px rgba(255, 106, 0, 0.4);
        }

        .dice-roll-popup .inner-lcars {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .dice-roll-popup .die-name,
        .dice-roll-popup .roll-value,
        .dice-roll-popup .die-type {
            font-size: 1.2rem;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 12px;
            border-radius: 10px;
            background: rgba(12, 11, 11, 0.6);
            border: 1px solid rgba(243, 198, 35, 0.16);
            text-transform: uppercase;
            letter-spacing: 0.12em;
        }

        .dice-roll-popup .roll-value {
            font-size: 2.4rem;
            font-family: var(--font-display);
            color: var(--furnace);
            text-shadow: 0 0 18px rgba(255, 106, 0, 0.46);
        }

        .blink_me {
            animation: ember-blink 0.66s ease-in-out infinite alternate;
        }

        @keyframes ember-blink {
            from { filter: drop-shadow(0 0 8px rgba(255, 106, 0, 0.35)); }
            to { filter: drop-shadow(0 0 20px rgba(243, 198, 35, 0.65)); }
        }

        @keyframes timer-pulse {
            0%, 100% { opacity: 0.65; transform: scale(0.98); }
            50% { opacity: 0.95; transform: scale(1.05); }
        }

        @keyframes prism-pan {
            0% { transform: translate3d(-4%, -6%, 0) scale(1); }
            50% { transform: translate3d(6%, 4%, 0) scale(1.05); }
            100% { transform: translate3d(-3%, 5%, 0) scale(0.98); }
        }

        @keyframes prism-rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (prefers-reduced-motion: reduce) {
            .spot,
            .dice-roll-popup,
            #timer_display,
            .prism-bg {
                transition-duration: 0.01ms !important;
                animation-duration: 0.01ms !important;
            }

            .prism-bg {
                display: none;
            }

            .tilt-card {
                transform: none !important;
            }

            .tilt-card::after,
            .top-bar::before {
                animation: none;
                display: none;
            }

            .counter-circle {
                animation: none;
            }

            .blink_me {
                animation: none;
            }
        }

        @media (max-width: 720px) {
            .container {
                padding: 28px 20px 36px;
                gap: 24px;
            }

            .grid {
                grid-template-columns: 1fr;
            }

            .top-bar {
                grid-template-columns: 1fr;
                gap: 12px;
            }

            .timer-cluster {
                justify-content: flex-start;
            }

            .breakaway-ribbon {
                grid-auto-columns: minmax(160px, 1fr);
            }
        }

        @media (max-width: 480px) {
            header.brand-lockup {
                padding: 22px;
            }

            header.brand-lockup h1 {
                font-size: 2.4rem;
            }

            .status-cluster {
                flex-direction: column;
                align-items: flex-start;
            }

            #timer_display {
                width: 82px;
                height: 82px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <audio id="hellfire" src="https://cdn.leantube.org/hellfire.mp3?v=1714958299269"></audio>
        <header class="brand-lockup" aria-label="Bootcut Hellfire edition">
            <h1>Bootcut</h1>
            <span class="tagline">Hellfire Campaign Board</span>
        </header>
        <div class="top-bar">
            <div class="status-cluster" aria-live="polite" aria-atomic="true">
                <span class="status-label">Current Player</span>
                <p id="current_player" class="status-line">ZilchGnu</p>
            </div>
            <div class="timer-cluster">
                <div class="timer-shell">
                    <div id="timer_display" class="timer-ring" role="timer" aria-live="off" aria-atomic="true">
                        <span class="timer-label">Turn</span>
                        <span id="timer_num">0:00</span>
                    </div>
                </div>
            </div>
            <div class="breakaway-ribbon" id="breakaway-react-root"></div>
        </div>
        <div class="board-frame">
            <div class="prism-bg" aria-hidden="true"></div>
            <div class="grid" id="board">
                <% board.forEach(function(dataRow, idxOfRow, orgnlAryObject) { %>
                    <div class="spot tilt-card" id='splot_<%= dataRow.id %>'>
                        <h2>
                            <span class="spot-number" id="splot_number_<%= dataRow.id %>">
                                <%= dataRow.id %>
                            </span>
                            <span class="splotEntry" id='splotEntry_<%= dataRow.id %>'><%= dataRow.entry %></span>
                        </h2>
                        <p class="use-count" id="splot_count_<%= dataRow.id %>">Uses: <%= dataRow.splot_dot %></p>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>
</body>
</html>
